syntax v1.0;

using "Omnius.Core.Cryptography";
using "Omnius.Core.Network";
using "Omnius.Xeus.Engines.Models";

namespace "Omnius.Xeus.Engines.Exchangers.Internal.Models";
option csharp_access_level "internal";

// Models

message Block {
    Hash: OmniHash,
    Value: bytes(capacity: 4 * 1024 * 1024, recyclable: true),
}

// ContentExchanger

enum ContentExchangerVersion : uint8 {
    Unknown = 0,
    Version1 = 1,
}

message ContentExchangerHelloMessage {
    Versions: vector<ContentExchangerVersion>(capacity: 32),
}

message ContentExchangerRequestExchangeMessage {
    ContentHash: OmniHash,
}

enum ContentExchangerRequestExchangeResultType : uint8 {
    Unknown = 0,
    Rejected = 1,
    Accepted = 2,
}

message ContentExchangerRequestExchangeResultMessage {
    Type: ContentExchangerRequestExchangeResultType,
}

message ContentExchangerDataMessage {
    WantBlockHashes: vector<OmniHash>(capacity: 8192),
    GiveBlocks: vector<Block>(capacity: 8),
}

// DeclaredMessageExchanger

enum DeclaredMessageExchangerVersion : uint8 {
    Unknown = 0,
    Version1 = 1,
}

message DeclaredMessageExchangerHelloMessage {
    Versions: vector<DeclaredMessageExchangerVersion>(capacity: 32),
}

message DeclaredMessageExchangerFetchMessage {
    Signature: OmniSignature,
    CreationTime: timestamp,
}

enum DeclaredMessageExchangerFetchResultType : uint8 {
    Unknown = 0,
    Rejected = 1,
    Found = 2,
    NotFound = 3,
    Same = 4,
}

message DeclaredMessageExchangerFetchResultMessage {
    Type: DeclaredMessageExchangerFetchResultType,
    DeclaredMessage: DeclaredMessage?,
}

message DeclaredMessageExchangerPostMessage {
    DeclaredMessage: DeclaredMessage,
}
