syntax v1.0;

using "Omnius.Xeus.Engines.Models";

namespace "Omnius.Xeus.Daemon";

service XeusService {
    GetReport: () -> (GetReportResult),

    GetMyNodeProfile: () -> (GetMyNodeProfileResult),
    AddCloudNodeProfiles: (AddCloudNodeProfilesRequest) -> (),

    PublishFileContent: (PublishFileContentRequest) -> (PublishFileContentResult),
    PublishMemoryContent: (PublishMemoryContentRequest) -> (PublishMemoryContentResult),
    UnpublishFileContent: (UnpublishFileContentRequest) -> (),
    UnpublishMemoryContent: (UnpublishMemoryContentRequest) -> (),

    SubscribeContent: (SubscribeContentRequest) -> (),
    UnsubscribeContent: (UnsubscribeContentRequest) -> (),
    ExportFileContent: (ExportFileContentRequest) -> (),
    ExportMemoryContent: (ExportMemoryContentRequest) -> (ExportMemoryContentResult),

    PublishDeclaredMessage: (PublishDeclaredMessageRequest) -> (),
    UnpublishDeclaredMessage: (UnpublishDeclaredMessageRequest) -> (),

    SubscribeDeclaredMessage: (SubscribeDeclaredMessageRequest) -> (),
    UnsubscribeDeclaredMessage: (UnsubscribeDeclaredMessageRequest) -> (),
    ExportDeclaredMessage: (ExportDeclaredMessageRequest) -> (ExportDeclaredMessageResult),
}

message GetReportResult {
}

message GetMyNodeProfileResult {
    NodeProfile: NodeProfile,
}

message AddCloudNodeProfilesRequest {
    NodeProfiles: vector<NodeProfile>(capacity: 32),
}

message PublishFileContentRequest {
    FilePath: string,
    Registrant: string,
}
message PublishFileContentResult {
    Hash: OmniHash,
}

message PublishMemoryContentRequest {
    Memory: bytes(capacity: 32 * 1024 * 1024),
    Registrant: string,
}
message PublishMemoryContentResult {
    Hash: OmniHash,
}

message UnpublishFileContentRequest {
    FilePath: string,
    Registrant: string,
}

message UnpublishMemoryContentRequest {
    RootHash: OmniHash,
    Registrant: string,
}

message SubscribeContentRequest {
    RootHash: OmniHash,
    Registrant: string,
}

message UnsubscribeContentRequest {
    RootHash: OmniHash,
    Registrant: string,
}

message ExportFileContentRequest {
    RootHash: OmniHash,
    FilePath: string,
}

message ExportMemoryContentRequest {
    RootHash: OmniHash,
}

message ExportMemoryContentResult {
    Memory: bytes?(capacity: 32 * 1024 * 1024, recyclable: true),
}

message PublishDeclaredMessageRequest {
    Message: DeclaredMessage,
    Registrant: string,
}

message UnpublishDeclaredMessageRequest {
    Signature: OmniSignature,
    Registrant: string,
}

message SubscribeDeclaredMessageRequest {
    Signature: OmniSignature,
    Registrant: string,
}

message UnsubscribeDeclaredMessageRequest {
    Signature: OmniSignature,
    Registrant: string,
}

message ExportDeclaredMessageRequest {
    Signature: OmniSignature,
}

message ExportDeclaredMessageResult {
    DeclaredMessage: DeclaredMessage?,
}
