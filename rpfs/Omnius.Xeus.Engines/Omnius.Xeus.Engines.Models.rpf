syntax v1.0;

using "Omnius.Core.Cryptography";
using "Omnius.Core.Network";

namespace "Omnius.Xeus.Engines.Models";

// Models

message NodeProfile {
    Addresses: vector<OmniAddress>(capacity: 32),
    EngineNames : vector<string(capacity: 256)>(capacity: 32),
}

message ResourceTag {
    Hash: OmniHash,
    EngineName: string(capacity: 256),
}

message DeclaredMessage {
    CreationTime: timestamp,
    Value: bytes(capacity: 32 * 1024 * 1024, recyclable: true),
    Certificate: OmniCertificate?,
}

message ConsistencyReport {
    BadBlockCount: uint32,
    CheckedBlockCount: uint32,
    TotalBlockCount: uint32,
}

message ConnectionReport {
    Type: ConnectionType,
    Address: OmniAddress,
}

enum ConnectionType : uint8 {
    Unknown = 0,
    Connected = 1,
    Accepted = 2,
}

// TcpConnector

message TcpConnectorOptions {
    ConnectingOptions: TcpConnectingOptions,
    AcceptingOptions: TcpAcceptingOptions,
    BandwidthOptions: BandwidthOptions,
}

message TcpConnectingOptions {
    Enabled: bool,
    ProxyOptions: TcpProxyOptions?,
}

message TcpProxyOptions {
    Type: TcpProxyType,
    Address: OmniAddress?,
}

enum TcpProxyType : uint8 {
    Unknown = 0,
    HttpProxy = 1,
    Socks5Proxy = 2,
}

message TcpAcceptingOptions {
    Enabled: bool,
    ListenAddresses: vector<OmniAddress>(capacity: 32),
    UseUpnp: bool,
}

message BandwidthOptions {
    MaxSendBytesPerSeconds: uint32,
    MaxReceiveBytesPerSeconds: uint32,
}

message TcpConnectorReport {
    ConnectedCount: uint32,
    AcceptedCount: uint32,
}

// CkadMediator

message CkadMediatorOptions {
    ConfigDirectoryPath: string(capacity: 1024),
    MaxConnectionCount: uint32,
}

message CkadMediatorReport {
    ConnectingConnectionCount: uint32,
    AcceptingConnectionCount: uint32,
}

// ContentExchanger

message ContentExchangerOptions {
    ConfigDirectoryPath: string(capacity: 1024),
    MaxConnectionCount: uint32,
}

message ContentExchangerReport {
    ConnectingConnectionCount: uint32,
    AcceptingConnectionCount: uint32,
}

// ContentPublisher

message ContentPublisherOptions {
    ConfigDirectoryPath: string(capacity: 1024),
}

message ContentPublisherReport {
    ContentPublishedItems: vector<ContentPublishedItemReport>,
}

message ContentPublishedItemReport {
    FilePath: string?,
    ContentHash: OmniHash?,
    Registrant: string,
}

// ContentSubscriber

message ContentSubscriberOptions {
    ConfigDirectoryPath: string(capacity: 1024),
}

message ContentSubscriberReport {
    ContentSubscribedItems: vector<ContentSubscribedItemReport>,
}

message ContentSubscribedItemReport {
    RootHash: OmniHash,
    Registrant: string,
}

// DeclaredMessageExchanger

message DeclaredMessageExchangerOptions {
    ConfigDirectoryPath: string(capacity: 1024),
    MaxConnectionCount: uint32,
}

message DeclaredMessageExchangerReport {
    ConnectingConnectionCount: uint32,
    AcceptingConnectionCount: uint32,
}

// DeclaredMessagePublisher

message DeclaredMessagePublisherOptions {
    ConfigDirectoryPath: string(capacity: 1024),
}

message DeclaredMessagePublisherReport {
    DeclaredMessagePublishedItems: vector<DeclaredMessagePublishedItemReport>,
}

message DeclaredMessagePublishedItemReport {
    Signature: OmniSignature,
    Registrant: string,
}

// DeclaredMessageSubscriber

message DeclaredMessageSubscriberOptions {
    ConfigDirectoryPath: string(capacity: 1024),
}

message DeclaredMessageSubscriberReport {
    DeclaredMessageSubscribedItems: vector<DeclaredMessageSubscribedItemReport>,
}

message DeclaredMessageSubscribedItemReport {
    Signature: OmniSignature,
    Registrant: string,
}
