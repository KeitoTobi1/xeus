syntax = v1.0;

using "Omnius.Core.Cryptography";
using "Omnius.Core.Network";
using "Omnius.Xeus.Service.Drivers";

namespace "Omnius.Xeus.Service.Engines";

/* Models */

table NodeProfile {
    Services: vector<string(capacity: 256)>(capacity: 32) = 0,
    Addresses: vector<OmniAddress>(capacity: 32) = 1,
}

table Tag {
    Type: string(capacity: 256) = 0,
    Hash: OmniHash = 1,
}

table DeclaredMessage {
    Value: bytes(capacity: 4194304) = 0,
}

table OrientedMessage {
    Tag: Tag = 0,
    Value: bytes(capacity: 4194304) = 1,
}

/* Optinos */

table NodeFinderOptions {
    ConfigPath: string(capacity: 1024) = 0,
    MaxConnectionCount: uint32 = 1,
}

table PublishContentStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

table WantContentStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

table ContentExchangerOptions {
    ConfigPath: string(capacity: 1024) = 0,
    MaxConnectionCount: uint32 = 1,
}

table PublishMessageStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

table WantMessageStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

table MessageExchangerOptions {
    ConfigPath: string(capacity: 1024) = 0,
    MaxConnectionCount: uint32 = 1,
}

/* Reports */

table ConsistencyReport {
    BadBlockCount: uint32 = 0,
    CheckedBlockCount: uint32 = 1,
    TotalBlockCount: uint32 = 2,
}

enum ConnectionType : uint8 {
    Unknown = 0,
    Connected = 1,
    Accepted = 2,
}

table ConnectionReport {
    Type: ConnectionType = 0,
    Endpoint: OmniAddress = 1,
}

table PublishContentStorageReport {
    Tag: OmniHash = 0,
}

table WantContentStorageReport {
    Tag: OmniHash = 0,
}

table PublishMessageStorageReport {
    Tag: OmniHash = 0,
}

table WantMessageStorageReport {
    Tag: OmniHash = 0,
}
