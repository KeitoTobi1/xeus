syntax v1.0;

using "Omnius.Core.Cryptography";
using "Omnius.Core.Network";
using "Omnius.Xeus.Service.Drivers";

namespace "Omnius.Xeus.Service.Engines";

/* Models */

table NodeProfile {
    Services: vector<string(capacity: 256)>(capacity: 32) = 0,
    Addresses: vector<OmniAddress>(capacity: 32) = 1,
}

table ResourceTag {
    Type: string(capacity: 256) = 0,
    Hash: OmniHash = 1,
}

table DeclaredMessage {
    Value: bytes(capacity: 33554432, recyclable: true) = 0,
}

/* Optinos */

table NodeFinderOptions {
    ConfigPath: string(capacity: 1024) = 0,
    MaxConnectionCount: uint32 = 1,
    Services: vector<string(capacity: 256)>(capacity: 32) = 2,
}

table PublishContentStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

table WantContentStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

table ContentExchangerOptions {
    ConfigPath: string(capacity: 1024) = 0,
    MaxConnectionCount: uint32 = 1,
}

table PublishDeclaredMessageStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

table WantDeclaredMessageStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

table DeclaredMessageExchangerOptions {
    ConfigPath: string(capacity: 1024) = 0,
    MaxConnectionCount: uint32 = 1,
}

/* Reports */

table ConsistencyReport {
    BadBlockCount: uint32 = 0,
    CheckedBlockCount: uint32 = 1,
    TotalBlockCount: uint32 = 2,
}

enum ConnectionType : uint8 {
    Unknown = 0,
    Connected = 1,
    Accepted = 2,
}

table ConnectionReport {
    Type: ConnectionType = 0,
    EndPoint: OmniAddress = 1,
}

table PublishContentStorageReport {
}

table WantContentStorageReport {
}

table PublishDeclaredMessageStorageReport {
}

table WantDeclaredMessageStorageReport {
}
