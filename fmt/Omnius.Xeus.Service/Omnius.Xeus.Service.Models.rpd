syntax v1.0;

using "Omnius.Core.Cryptography";
using "Omnius.Core.Network";

namespace "Omnius.Xeus.Service.Models";

// Models

message NodeProfile {
    Services: vector<string(capacity: 256)>(capacity: 32) = 0,
    Addresses: vector<OmniAddress>(capacity: 32) = 1,
}

message ResourceTag {
    Type: string(capacity: 256) = 0,
    Hash: OmniHash = 1,
}

message DeclaredMessage {
    CreationTime: timestamp = 0,
    Value: bytes(capacity: 33554432, recyclable: true) = 1,
    Certificate: OmniCertificate? = 2,
}

message ConsistencyReport {
    BadBlockCount: uint32 = 0,
    CheckedBlockCount: uint32 = 1,
    TotalBlockCount: uint32 = 2,
}

enum ConnectionType : uint8 {
    Unknown = 0,
    Connected = 1,
    Accepted = 2,
}

message ConnectionReport {
    Type: ConnectionType = 0,
    EndPoint: OmniAddress = 1,
}

// TcpConneckor

enum TcpProxyType : uint8 {
    Unknown = 0,
    HttpProxy = 1,
    Socks5Proxy = 2,
}

message TcpProxyOptions {
    Type: TcpProxyType = 0,
    Address: OmniAddress = 1,
}

message TcpConnectingOptions {
    Enabled: bool = 0,
    ProxyOptions: TcpProxyOptions? = 1,
}

message TcpAcceptingOptions {
    Enabled: bool = 0,
    ListenAddresses: vector<OmniAddress>(capacity: 32) = 1,
    UseUpnp: bool = 2,
}

message BandwidthOptions {
    MaxSendBytesPerSeconds: uint32 = 0,
    MaxReceiveBytesPerSeconds: uint32 = 1,
}

message TcpConnectorOptions {
    TcpConnectingOptions: TcpConnectingOptions = 0,
    TcpAcceptingOptions: TcpAcceptingOptions = 1,
    BandwidthOptions: BandwidthOptions = 2,
}

message TcpConnectorReport {
}

// NodeFinder

message NodeFinderOptions {
    ConfigPath: string(capacity: 1024) = 0,
    MaxConnectionCount: uint32 = 1,
    Services: vector<string(capacity: 256)>(capacity: 32) = 2,
}

message NodeFinderReport {
}

// ContentExchanger

message ContentExchangerOptions {
    ConfigPath: string(capacity: 1024) = 0,
    MaxConnectionCount: uint32 = 1,
}

message ContentExchangerReport {
}

// PushContentStorage

message PushContentStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

message PushContentStorageReport {
}

// WantContentStorage

message WantContentStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

message WantContentStorageReport {
}

// DeclaredMessageExchanger

message DeclaredMessageExchangerOptions {
    ConfigPath: string(capacity: 1024) = 0,
    MaxConnectionCount: uint32 = 1,
}

message DeclaredMessageExchangerReport {
}

// PushDeclaredMessageStorage

message PushDeclaredMessageStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

message PushDeclaredMessageStorageReport {
}

// WantDeclaredMessageStorage

message WantDeclaredMessageStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

message WantDeclaredMessageStorageReport {
}
