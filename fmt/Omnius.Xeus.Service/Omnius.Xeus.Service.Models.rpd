syntax v1.0;

using "Omnius.Core.Cryptography";
using "Omnius.Core.Network";

namespace "Omnius.Xeus.Service.Models";

// Models

table NodeProfile {
    Services: vector<string(capacity: 256)>(capacity: 32) = 0,
    Addresses: vector<OmniAddress>(capacity: 32) = 1,
}

table ResourceTag {
    Type: string(capacity: 256) = 0,
    Hash: OmniHash = 1,
}

table ContentBlock {
    ResourceTag: OmniHash = 0,
    Value: bytes(capacity: 4194304, recyclable: true) = 1,
}

table DeclaredMessage {
    CreationTime: timestamp = 0,
    Value: bytes(capacity: 33554432, recyclable: true) = 1,
    Certificate: OmniCertificate? = 2,
}

table ConsistencyReport {
    BadBlockCount: uint32 = 0,
    CheckedBlockCount: uint32 = 1,
    TotalBlockCount: uint32 = 2,
}

enum ConnectionType : uint8 {
    Unknown = 0,
    Connected = 1,
    Accepted = 2,
}

table ConnectionReport {
    Type: ConnectionType = 0,
    EndPoint: OmniAddress = 1,
}

// TcpConneckor

enum TcpProxyType : uint8 {
    Unknown = 0,
    HttpProxy = 1,
    Socks5Proxy = 2,
}

table TcpProxyOptions {
    Type: TcpProxyType = 0,
    Address: OmniAddress = 1,
}

table TcpConnectingOptions {
    Enabled: bool = 0,
    ProxyOptions: TcpProxyOptions? = 1,
}

table TcpAcceptingOptions {
    Enabled: bool = 0,
    ListenAddresses: vector<OmniAddress>(capacity: 32) = 1,
    UseUpnp: bool = 2,
}

table BandwidthOptions {
    MaxSendBytesPerSeconds: uint32 = 0,
    MaxReceiveBytesPerSeconds: uint32 = 1,
}

table TcpConnectorOptions {
    TcpConnectingOptions: TcpConnectingOptions = 0,
    TcpAcceptingOptions: TcpAcceptingOptions = 1,
    BandwidthOptions: BandwidthOptions = 2,
}

table TcpConnectorReport {
}

// NodeFinder

table NodeFinderOptions {
    ConfigPath: string(capacity: 1024) = 0,
    MaxConnectionCount: uint32 = 1,
    Services: vector<string(capacity: 256)>(capacity: 32) = 2,
}

table NodeFinderReport {
}

// ContentExchanger

table ContentExchangerOptions {
    ConfigPath: string(capacity: 1024) = 0,
    MaxConnectionCount: uint32 = 1,
}

table ContentExchangerReport {
}

// PushContentStorage

table PushContentStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

table PushContentStorageReport {
}

// WantContentStorage

table WantContentStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

table WantContentStorageReport {
}

// DeclaredMessageExchanger

table DeclaredMessageExchangerOptions {
    ConfigPath: string(capacity: 1024) = 0,
    MaxConnectionCount: uint32 = 1,
}

table DeclaredMessageExchangerReport {
}

// PushDeclaredMessageStorage

table PushDeclaredMessageStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

table PushDeclaredMessageStorageReport {
}

// WantDeclaredMessageStorage

table WantDeclaredMessageStorageOptions {
    ConfigPath: string(capacity: 1024) = 0,
}

table WantDeclaredMessageStorageReport {
}
