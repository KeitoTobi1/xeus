syntax v1.0;

using "Omnius.Core.Cryptography";
using "Omnius.Core.Network";

namespace "Omnius.Xeus.Components.Models";

// Models

message NodeProfile {
    AvailableEngineNames : vector<string(capacity: 256)>(capacity: 32),
    Addresses: vector<OmniAddress>(capacity: 32),
}

message ResourceTag {
    Type: string(capacity: 256),
    Hash: OmniHash,
}

message DeclaredMessage {
    CreationTime: timestamp,
    Value: bytes(capacity: 33554432, recyclable: true),
    Certificate: OmniCertificate?,
}

message ConsistencyReport {
    BadBlockCount: uint32,
    CheckedBlockCount: uint32,
    TotalBlockCount: uint32,
}

enum ConnectionType : uint8 {
    Unknown = 0,
    Connected = 1,
    Accepted = 2,
}

message ConnectionReport {
    Type: ConnectionType,
    EndPoint: OmniAddress,
}

// TcpConnector

enum TcpProxyType : uint8 {
    Unknown = 0,
    HttpProxy = 1,
    Socks5Proxy = 2,
}

message TcpProxyOptions {
    Type: TcpProxyType,
    Address: OmniAddress?,
}

message TcpConnectingOptions {
    Enabled: bool,
    ProxyOptions: TcpProxyOptions?,
}

message TcpAcceptingOptions {
    Enabled: bool,
    ListenAddresses: vector<OmniAddress>(capacity: 32),
    UseUpnp: bool,
}

message BandwidthOptions {
    MaxSendBytesPerSeconds: uint32,
    MaxReceiveBytesPerSeconds: uint32,
}

message TcpConnectorOptions {
    ConnectingOptions: TcpConnectingOptions,
    AcceptingOptions: TcpAcceptingOptions,
    BandwidthOptions: BandwidthOptions,
}

message TcpConnectorReport {
}

// NodeFinder

message NodeFinderOptions {
    ConfigPath: string(capacity: 1024),
    MaxConnectionCount: uint32,
}

message NodeFinderReport {
}

// ContentExchanger

message ContentExchangerOptions {
    ConfigPath: string(capacity: 1024),
    MaxConnectionCount: uint32,
}

message ContentExchangerReport {
}

// PushContentStorage

message PushContentStorageOptions {
    ConfigPath: string(capacity: 1024),
}

message PushContentStorageReport {
}

// WantContentStorage

message WantContentStorageOptions {
    ConfigPath: string(capacity: 1024),
}

message WantContentStorageReport {
}

// DeclaredMessageExchanger

message DeclaredMessageExchangerOptions {
    ConfigPath: string(capacity: 1024),
    MaxConnectionCount: uint32,
}

message DeclaredMessageExchangerReport {
}

// PushDeclaredMessageStorage

message PushDeclaredMessageStorageOptions {
    ConfigPath: string(capacity: 1024),
}

message PushDeclaredMessageStorageReport {
}

// WantDeclaredMessageStorage

message WantDeclaredMessageStorageOptions {
    ConfigPath: string(capacity: 1024),
}

message WantDeclaredMessageStorageReport {
}
