syntax = v1.0;

using "Omnius.Core.Cryptography";
using "Omnius.Core.Network";
using "Omnius.Xeus.Service.Engines";

namespace "Omnius.Xeus.Service.Engines.Internal";
option csharp_access_level = "internal";

/* Models */

table MerkleTreeSection {
    Depth: int32 = 0,
    Length: uint64 = 1,
    Hashes: vector<OmniHash>(capacity: 1073741824) = 2,
}

table Location {
    Tag: Tag = 0,
    NodeProfiles: vector<NodeProfile>(capacity: 8192) = 1,
}

table ContentBlock {
    Tag: OmniHash = 0,
    Value: bytes(capacity: 4194304, recyclable: true) = 1,
}

table ContentBlockFlags {
    Depth: int32 = 0,
    Flags: bytes(capacity: 4194304, recyclable: true) = 1,
}

/* Messages */

enum NodeFinderVersion : int8 {
    Unknown = 0,
    Version1 = 1,
}

table NodeFinderHelloMessage {
    Versions: vector<NodeFinderVersion>(capacity: 32) = 0,
}

table NodeFinderProfileMessage {
    Id: bytes(capacity: 32) = 0,
    NodeProfile: NodeProfile = 1,
}

table NodeFinderDataMessage {
    PushNodeProfiles: vector<NodeProfile>(capacity: 256) = 0,
    PushLocations: vector<Location>(capacity: 256) = 1,
    WantLocations: vector<Tag>(capacity: 256) = 2,
    GiveLocations: vector<Location>(capacity: 256) = 3,
}

enum ContentExchangerVersion : uint8 {
    Unknown = 0,
    Version1 = 1,
}

table ContentExchangerHelloMessage {
    Versions: vector<ContentExchangerVersion>(capacity: 32) = 0,
}

table ContentExchangerRequestMessage {
    Tag: OmniHash = 0,
    NodeProfile: NodeProfile = 1,
}

table ContentExchangerResponseMessage {
    Tag: OmniHash = 0,
    NodeProfile: NodeProfile = 1,
}

table ContentExchangerDataMessage {
    PushNodeProfiles: vector<NodeProfile>(capacity: 256) = 0,
    ContentBlockFlags: vector<ContentBlockFlags>(capacity: 32) = 1,
    WantContentBlocks: vector<OmniHash>(capacity: 256) = 2,
    CancelContentBlocks: vector<OmniHash>(capacity: 256) = 3,
    GiveContentBlocks: vector<ContentBlock>(capacity: 8) = 4,
}

/* Configs */

table NodeFinderConfig {
    NodeProfileMap: map<NodeProfile, timestamp>(capacity: 1073741824) = 0,
}
