syntax v1.0;

using "Omnius.Core.Cryptography";
using "Omnius.Core.Network";
using "Omnius.Xeus.Service.Models";

namespace "Omnius.Xeus.Service.Engines.Internal";
option csharp_access_level "internal";

// Models

message ResourceLocation {
    ResourceTag: ResourceTag = 0,
    NodeProfiles: vector<NodeProfile>(capacity: 8192) = 1,
}

message ContentBlock {
    Hash: OmniHash = 0,
    Value: bytes(capacity: 4194304, recyclable: true) = 1,
}

message ContentBlockFlags {
    Depth: int32 = 0,
    Flags: bytes(capacity: 4194304, recyclable: true) = 1,
}

// NodeFinder

enum NodeFinderVersion : int8 {
    Unknown = 0,
    Version1 = 1,
}

message NodeFinderHelloMessage {
    Versions: vector<NodeFinderVersion>(capacity: 32) = 0,
}

message NodeFinderProfileMessage {
    Id: bytes(capacity: 32) = 0,
    NodeProfile: NodeProfile = 1,
}

message NodeFinderDataMessage {
    PushNodeProfiles: vector<NodeProfile>(capacity: 256) = 0,
    PushResourceLocations: vector<ResourceLocation>(capacity: 256) = 1,
    WantResourceLocations: vector<ResourceTag>(capacity: 256) = 2,
    GiveResourceLocations: vector<ResourceLocation>(capacity: 256) = 3,
}

// ContentExchanger

enum ContentExchangerVersion : uint8 {
    Unknown = 0,
    Version1 = 1,
}

message ContentExchangerHelloMessage {
    Versions: vector<ContentExchangerVersion>(capacity: 32) = 0,
}

message ContentExchangerRequestExchangeMessage {
    Hash: OmniHash = 0,
}

enum ContentExchangerRequestExchangeResultType : uint8 {
    Unknown = 0,
    Rejected = 1,
    Accepted = 2,
}

message ContentExchangerRequestExchangeResultMessage {
    Type: ContentExchangerRequestExchangeResultType = 0,
}

message ContentExchangerDataMessage {
    PushNodeProfiles: vector<NodeProfile>(capacity: 256) = 0,
    OwnedContentBlockFlags: vector<ContentBlockFlags>(capacity: 32) = 1,
    WantContentBlockHashes: vector<OmniHash>(capacity: 256) = 2,
    GiveContentBlocks: vector<ContentBlock>(capacity: 8) = 3,
}

// DeclaredMessageExchanger

enum DeclaredMessageExchangerVersion : uint8 {
    Unknown = 0,
    Version1 = 1,
}

message DeclaredMessageExchangerHelloMessage {
    Versions: vector<DeclaredMessageExchangerVersion>(capacity: 32) = 0,
}

message DeclaredMessageExchangerFetchMessage {
    Signature: OmniSignature = 0,
    CreationTime: timestamp = 1,
}

enum DeclaredMessageExchangerFetchResultType : uint8 {
    Unknown = 0,
    Rejected = 1,
    Found = 2,
    NotFound = 3,
    Same = 4,
}

message DeclaredMessageExchangerFetchResultMessage {
    Type: DeclaredMessageExchangerFetchResultType = 0,
    DeclaredMessage: DeclaredMessage? = 1,
}

message DeclaredMessageExchangerPostMessage {
    DeclaredMessage: DeclaredMessage = 0,
}
