// <auto-generated/>
#nullable enable

namespace Omnius.Xeus.Remoting
{
    public sealed partial class GetReportResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.GetReportResult>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.GetReportResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.GetReportResult>.Formatter;
        public static global::Omnius.Xeus.Remoting.GetReportResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.GetReportResult>.Empty;

        static GetReportResult()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.GetReportResult>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.GetReportResult>.Empty = new global::Omnius.Xeus.Remoting.GetReportResult();
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public GetReportResult()
        {

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                return ___h.ToHashCode();
            });
        }


        public static global::Omnius.Xeus.Remoting.GetReportResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.GetReportResult? left, global::Omnius.Xeus.Remoting.GetReportResult? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.GetReportResult? left, global::Omnius.Xeus.Remoting.GetReportResult? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.GetReportResult) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.GetReportResult)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.GetReportResult? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.GetReportResult>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.GetReportResult value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.GetReportResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();


                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                    }
                }

                return new global::Omnius.Xeus.Remoting.GetReportResult();
            }
        }
    }
    public sealed partial class GetMyNodeLocationResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.GetMyNodeLocationResult>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.GetMyNodeLocationResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.GetMyNodeLocationResult>.Formatter;
        public static global::Omnius.Xeus.Remoting.GetMyNodeLocationResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.GetMyNodeLocationResult>.Empty;

        static GetMyNodeLocationResult()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.GetMyNodeLocationResult>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.GetMyNodeLocationResult>.Empty = new global::Omnius.Xeus.Remoting.GetMyNodeLocationResult(global::Omnius.Xeus.Models.NodeLocation.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public GetMyNodeLocationResult(global::Omnius.Xeus.Models.NodeLocation nodeLocation)
        {
            if (nodeLocation is null) throw new global::System.ArgumentNullException("nodeLocation");

            this.NodeLocation = nodeLocation;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (nodeLocation != default) ___h.Add(nodeLocation.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Xeus.Models.NodeLocation NodeLocation { get; }

        public static global::Omnius.Xeus.Remoting.GetMyNodeLocationResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.GetMyNodeLocationResult? left, global::Omnius.Xeus.Remoting.GetMyNodeLocationResult? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.GetMyNodeLocationResult? left, global::Omnius.Xeus.Remoting.GetMyNodeLocationResult? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.GetMyNodeLocationResult) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.GetMyNodeLocationResult)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.GetMyNodeLocationResult? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.NodeLocation != target.NodeLocation) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.GetMyNodeLocationResult>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.GetMyNodeLocationResult value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.NodeLocation != global::Omnius.Xeus.Models.NodeLocation.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Xeus.Models.NodeLocation.Formatter.Serialize(ref w, value.NodeLocation, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.GetMyNodeLocationResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Models.NodeLocation p_nodeLocation = global::Omnius.Xeus.Models.NodeLocation.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_nodeLocation = global::Omnius.Xeus.Models.NodeLocation.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.GetMyNodeLocationResult(p_nodeLocation);
            }
        }
    }
    public sealed partial class AddCloudNodeLocationsRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest>.Formatter;
        public static global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest>.Empty;

        static AddCloudNodeLocationsRequest()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest>.Empty = new global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest(global::System.Array.Empty<global::Omnius.Xeus.Models.NodeLocation>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxNodeLocationsCount = 32;

        public AddCloudNodeLocationsRequest(global::Omnius.Xeus.Models.NodeLocation[] nodeLocations)
        {
            if (nodeLocations is null) throw new global::System.ArgumentNullException("nodeLocations");
            if (nodeLocations.Length > 32) throw new global::System.ArgumentOutOfRangeException("nodeLocations");
            foreach (var n in nodeLocations)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.NodeLocations = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Models.NodeLocation>(nodeLocations);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in nodeLocations)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Models.NodeLocation> NodeLocations { get; }

        public static global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest? left, global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest? left, global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.NodeLocations, target.NodeLocations)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.NodeLocations.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.NodeLocations.Count);
                    foreach (var n in value.NodeLocations)
                    {
                        global::Omnius.Xeus.Models.NodeLocation.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Models.NodeLocation[] p_nodeLocations = global::System.Array.Empty<global::Omnius.Xeus.Models.NodeLocation>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_nodeLocations = new global::Omnius.Xeus.Models.NodeLocation[length];
                                for (int i = 0; i < p_nodeLocations.Length; i++)
                                {
                                    p_nodeLocations[i] = global::Omnius.Xeus.Models.NodeLocation.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest(p_nodeLocations);
            }
        }
    }
    public sealed partial class PublishFileInStorageRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInStorageRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.PublishFileInStorageRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInStorageRequest>.Formatter;
        public static global::Omnius.Xeus.Remoting.PublishFileInStorageRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInStorageRequest>.Empty;

        static PublishFileInStorageRequest()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInStorageRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInStorageRequest>.Empty = new global::Omnius.Xeus.Remoting.PublishFileInStorageRequest(string.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxFilePathLength = 2147483647;
        public static readonly int MaxRegistrantLength = 2147483647;

        public PublishFileInStorageRequest(string filePath, string registrant)
        {
            if (filePath is null) throw new global::System.ArgumentNullException("filePath");
            if (filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.FilePath = filePath;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (filePath != default) ___h.Add(filePath.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string FilePath { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Remoting.PublishFileInStorageRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.PublishFileInStorageRequest? left, global::Omnius.Xeus.Remoting.PublishFileInStorageRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.PublishFileInStorageRequest? left, global::Omnius.Xeus.Remoting.PublishFileInStorageRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.PublishFileInStorageRequest) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.PublishFileInStorageRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.PublishFileInStorageRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.FilePath != target.FilePath) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.PublishFileInStorageRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.PublishFileInStorageRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.FilePath != string.Empty)
                {
                    w.Write((uint)1);
                    w.Write(value.FilePath);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.PublishFileInStorageRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string p_filePath = string.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_filePath = r.GetString(2147483647);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.PublishFileInStorageRequest(p_filePath, p_registrant);
            }
        }
    }
    public sealed partial class PublishFileInStorageResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInStorageResult>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.PublishFileInStorageResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInStorageResult>.Formatter;
        public static global::Omnius.Xeus.Remoting.PublishFileInStorageResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInStorageResult>.Empty;

        static PublishFileInStorageResult()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInStorageResult>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInStorageResult>.Empty = new global::Omnius.Xeus.Remoting.PublishFileInStorageResult(global::Omnius.Core.Cryptography.OmniHash.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public PublishFileInStorageResult(global::Omnius.Core.Cryptography.OmniHash hash)
        {
            this.Hash = hash;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (hash != default) ___h.Add(hash.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash Hash { get; }

        public static global::Omnius.Xeus.Remoting.PublishFileInStorageResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.PublishFileInStorageResult? left, global::Omnius.Xeus.Remoting.PublishFileInStorageResult? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.PublishFileInStorageResult? left, global::Omnius.Xeus.Remoting.PublishFileInStorageResult? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.PublishFileInStorageResult) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.PublishFileInStorageResult)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.PublishFileInStorageResult? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Hash != target.Hash) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.PublishFileInStorageResult>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.PublishFileInStorageResult value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Hash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.Hash, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.PublishFileInStorageResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_hash = global::Omnius.Core.Cryptography.OmniHash.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_hash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.PublishFileInStorageResult(p_hash);
            }
        }
    }
    public sealed partial class PublishFileInMemoryRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest>.Formatter;
        public static global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest>.Empty;

        static PublishFileInMemoryRequest()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest>.Empty = new global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest(global::System.ReadOnlyMemory<byte>.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxMemoryLength = 33554432;
        public static readonly int MaxRegistrantLength = 2147483647;

        public PublishFileInMemoryRequest(global::System.ReadOnlyMemory<byte> memory, string registrant)
        {
            if (memory.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("memory");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.Memory = memory;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (!memory.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(memory.Span));
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::System.ReadOnlyMemory<byte> Memory { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest? left, global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest? left, global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.BytesOperations.Equals(this.Memory.Span, target.Memory.Span)) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (!value.Memory.IsEmpty)
                {
                    w.Write((uint)1);
                    w.Write(value.Memory.Span);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::System.ReadOnlyMemory<byte> p_memory = global::System.ReadOnlyMemory<byte>.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_memory = r.GetMemory(33554432);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest(p_memory, p_registrant);
            }
        }
    }
    public sealed partial class PublishFileInMemoryResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInMemoryResult>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.PublishFileInMemoryResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInMemoryResult>.Formatter;
        public static global::Omnius.Xeus.Remoting.PublishFileInMemoryResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInMemoryResult>.Empty;

        static PublishFileInMemoryResult()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInMemoryResult>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishFileInMemoryResult>.Empty = new global::Omnius.Xeus.Remoting.PublishFileInMemoryResult(global::Omnius.Core.Cryptography.OmniHash.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public PublishFileInMemoryResult(global::Omnius.Core.Cryptography.OmniHash hash)
        {
            this.Hash = hash;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (hash != default) ___h.Add(hash.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash Hash { get; }

        public static global::Omnius.Xeus.Remoting.PublishFileInMemoryResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.PublishFileInMemoryResult? left, global::Omnius.Xeus.Remoting.PublishFileInMemoryResult? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.PublishFileInMemoryResult? left, global::Omnius.Xeus.Remoting.PublishFileInMemoryResult? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.PublishFileInMemoryResult) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.PublishFileInMemoryResult)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.PublishFileInMemoryResult? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Hash != target.Hash) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.PublishFileInMemoryResult>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.PublishFileInMemoryResult value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Hash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.Hash, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.PublishFileInMemoryResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_hash = global::Omnius.Core.Cryptography.OmniHash.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_hash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.PublishFileInMemoryResult(p_hash);
            }
        }
    }
    public sealed partial class UnpublishFileInStorageRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest>.Formatter;
        public static global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest>.Empty;

        static UnpublishFileInStorageRequest()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest>.Empty = new global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest(string.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxFilePathLength = 2147483647;
        public static readonly int MaxRegistrantLength = 2147483647;

        public UnpublishFileInStorageRequest(string filePath, string registrant)
        {
            if (filePath is null) throw new global::System.ArgumentNullException("filePath");
            if (filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.FilePath = filePath;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (filePath != default) ___h.Add(filePath.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string FilePath { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest? left, global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest? left, global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.FilePath != target.FilePath) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.FilePath != string.Empty)
                {
                    w.Write((uint)1);
                    w.Write(value.FilePath);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string p_filePath = string.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_filePath = r.GetString(2147483647);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest(p_filePath, p_registrant);
            }
        }
    }
    public sealed partial class UnpublishFileInMemoryRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest>.Formatter;
        public static global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest>.Empty;

        static UnpublishFileInMemoryRequest()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest>.Empty = new global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest(global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public UnpublishFileInMemoryRequest(global::Omnius.Core.Cryptography.OmniHash rootHash, string registrant)
        {
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.RootHash = rootHash;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest? left, global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest? left, global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.RootHash != target.RootHash) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest(p_rootHash, p_registrant);
            }
        }
    }
    public sealed partial class SubscribeFileRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.SubscribeFileRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.SubscribeFileRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.SubscribeFileRequest>.Formatter;
        public static global::Omnius.Xeus.Remoting.SubscribeFileRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.SubscribeFileRequest>.Empty;

        static SubscribeFileRequest()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.SubscribeFileRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.SubscribeFileRequest>.Empty = new global::Omnius.Xeus.Remoting.SubscribeFileRequest(global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public SubscribeFileRequest(global::Omnius.Core.Cryptography.OmniHash rootHash, string registrant)
        {
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.RootHash = rootHash;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Remoting.SubscribeFileRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.SubscribeFileRequest? left, global::Omnius.Xeus.Remoting.SubscribeFileRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.SubscribeFileRequest? left, global::Omnius.Xeus.Remoting.SubscribeFileRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.SubscribeFileRequest) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.SubscribeFileRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.SubscribeFileRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.RootHash != target.RootHash) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.SubscribeFileRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.SubscribeFileRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.SubscribeFileRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.SubscribeFileRequest(p_rootHash, p_registrant);
            }
        }
    }
    public sealed partial class UnsubscribeFileRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnsubscribeFileRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.UnsubscribeFileRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnsubscribeFileRequest>.Formatter;
        public static global::Omnius.Xeus.Remoting.UnsubscribeFileRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnsubscribeFileRequest>.Empty;

        static UnsubscribeFileRequest()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnsubscribeFileRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnsubscribeFileRequest>.Empty = new global::Omnius.Xeus.Remoting.UnsubscribeFileRequest(global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public UnsubscribeFileRequest(global::Omnius.Core.Cryptography.OmniHash rootHash, string registrant)
        {
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.RootHash = rootHash;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Remoting.UnsubscribeFileRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.UnsubscribeFileRequest? left, global::Omnius.Xeus.Remoting.UnsubscribeFileRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.UnsubscribeFileRequest? left, global::Omnius.Xeus.Remoting.UnsubscribeFileRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.UnsubscribeFileRequest) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.UnsubscribeFileRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.UnsubscribeFileRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.RootHash != target.RootHash) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.UnsubscribeFileRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.UnsubscribeFileRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.UnsubscribeFileRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.UnsubscribeFileRequest(p_rootHash, p_registrant);
            }
        }
    }
    public sealed partial class ExportFileToStorageRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToStorageRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.ExportFileToStorageRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToStorageRequest>.Formatter;
        public static global::Omnius.Xeus.Remoting.ExportFileToStorageRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToStorageRequest>.Empty;

        static ExportFileToStorageRequest()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToStorageRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToStorageRequest>.Empty = new global::Omnius.Xeus.Remoting.ExportFileToStorageRequest(global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxFilePathLength = 2147483647;

        public ExportFileToStorageRequest(global::Omnius.Core.Cryptography.OmniHash rootHash, string filePath)
        {
            if (filePath is null) throw new global::System.ArgumentNullException("filePath");
            if (filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");

            this.RootHash = rootHash;
            this.FilePath = filePath;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                if (filePath != default) ___h.Add(filePath.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
        public string FilePath { get; }

        public static global::Omnius.Xeus.Remoting.ExportFileToStorageRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.ExportFileToStorageRequest? left, global::Omnius.Xeus.Remoting.ExportFileToStorageRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.ExportFileToStorageRequest? left, global::Omnius.Xeus.Remoting.ExportFileToStorageRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.ExportFileToStorageRequest) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.ExportFileToStorageRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.ExportFileToStorageRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.RootHash != target.RootHash) return false;
            if (this.FilePath != target.FilePath) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.ExportFileToStorageRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.ExportFileToStorageRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                if (value.FilePath != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.FilePath);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.ExportFileToStorageRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
                string p_filePath = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_filePath = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.ExportFileToStorageRequest(p_rootHash, p_filePath);
            }
        }
    }
    public sealed partial class ExportFileToMemoryRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest>.Formatter;
        public static global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest>.Empty;

        static ExportFileToMemoryRequest()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest>.Empty = new global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest(global::Omnius.Core.Cryptography.OmniHash.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public ExportFileToMemoryRequest(global::Omnius.Core.Cryptography.OmniHash rootHash)
        {
            this.RootHash = rootHash;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }

        public static global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest? left, global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest? left, global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.RootHash != target.RootHash) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest(p_rootHash);
            }
        }
    }
    public sealed partial class ExportFileToMemoryResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToMemoryResult>, global::System.IDisposable
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.ExportFileToMemoryResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToMemoryResult>.Formatter;
        public static global::Omnius.Xeus.Remoting.ExportFileToMemoryResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToMemoryResult>.Empty;

        static ExportFileToMemoryResult()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToMemoryResult>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportFileToMemoryResult>.Empty = new global::Omnius.Xeus.Remoting.ExportFileToMemoryResult(null);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxMemoryLength = 33554432;

        public ExportFileToMemoryResult(global::System.Buffers.IMemoryOwner<byte>? memory)
        {
            if (memory is not null && memory.Memory.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("memory");

            _memory = memory;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (memory is not null && !memory.Memory.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(memory.Memory.Span));
                return ___h.ToHashCode();
            });
        }

        private readonly global::System.Buffers.IMemoryOwner<byte>? _memory;
        public global::System.ReadOnlyMemory<byte>? Memory => _memory?.Memory;

        public static global::Omnius.Xeus.Remoting.ExportFileToMemoryResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.ExportFileToMemoryResult? left, global::Omnius.Xeus.Remoting.ExportFileToMemoryResult? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.ExportFileToMemoryResult? left, global::Omnius.Xeus.Remoting.ExportFileToMemoryResult? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.ExportFileToMemoryResult) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.ExportFileToMemoryResult)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.ExportFileToMemoryResult? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if ((this.Memory is null) != (target.Memory is null)) return false;
            if ((this.Memory is not null) && (target.Memory is not null) && !global::Omnius.Core.BytesOperations.Equals(this.Memory.Value.Span, target.Memory.Value.Span)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        public void Dispose()
        {
            _memory?.Dispose();
        }

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.ExportFileToMemoryResult>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.ExportFileToMemoryResult value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Memory != null)
                {
                    w.Write((uint)1);
                    w.Write(value.Memory.Value.Span);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.ExportFileToMemoryResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::System.Buffers.IMemoryOwner<byte>? p_memory = null;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_memory = r.GetRecyclableMemory(33554432);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.ExportFileToMemoryResult(p_memory);
            }
        }
    }
    public sealed partial class PublishShoutRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishShoutRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.PublishShoutRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishShoutRequest>.Formatter;
        public static global::Omnius.Xeus.Remoting.PublishShoutRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishShoutRequest>.Empty;

        static PublishShoutRequest()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishShoutRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.PublishShoutRequest>.Empty = new global::Omnius.Xeus.Remoting.PublishShoutRequest(global::Omnius.Xeus.Models.Shout.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public PublishShoutRequest(global::Omnius.Xeus.Models.Shout message, string registrant)
        {
            if (message is null) throw new global::System.ArgumentNullException("message");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.Message = message;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (message != default) ___h.Add(message.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Xeus.Models.Shout Message { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Remoting.PublishShoutRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.PublishShoutRequest? left, global::Omnius.Xeus.Remoting.PublishShoutRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.PublishShoutRequest? left, global::Omnius.Xeus.Remoting.PublishShoutRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.PublishShoutRequest) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.PublishShoutRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.PublishShoutRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Message != target.Message) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.PublishShoutRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.PublishShoutRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Message != global::Omnius.Xeus.Models.Shout.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Xeus.Models.Shout.Formatter.Serialize(ref w, value.Message, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.PublishShoutRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Models.Shout p_message = global::Omnius.Xeus.Models.Shout.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_message = global::Omnius.Xeus.Models.Shout.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.PublishShoutRequest(p_message, p_registrant);
            }
        }
    }
    public sealed partial class UnpublishShoutRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishShoutRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.UnpublishShoutRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishShoutRequest>.Formatter;
        public static global::Omnius.Xeus.Remoting.UnpublishShoutRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishShoutRequest>.Empty;

        static UnpublishShoutRequest()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishShoutRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnpublishShoutRequest>.Empty = new global::Omnius.Xeus.Remoting.UnpublishShoutRequest(global::Omnius.Core.Cryptography.OmniSignature.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public UnpublishShoutRequest(global::Omnius.Core.Cryptography.OmniSignature signature, string registrant)
        {
            if (signature is null) throw new global::System.ArgumentNullException("signature");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.Signature = signature;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (signature != default) ___h.Add(signature.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Remoting.UnpublishShoutRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.UnpublishShoutRequest? left, global::Omnius.Xeus.Remoting.UnpublishShoutRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.UnpublishShoutRequest? left, global::Omnius.Xeus.Remoting.UnpublishShoutRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.UnpublishShoutRequest) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.UnpublishShoutRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.UnpublishShoutRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Signature != target.Signature) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.UnpublishShoutRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.UnpublishShoutRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.UnpublishShoutRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.UnpublishShoutRequest(p_signature, p_registrant);
            }
        }
    }
    public sealed partial class SubscribeShoutRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.SubscribeShoutRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.SubscribeShoutRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.SubscribeShoutRequest>.Formatter;
        public static global::Omnius.Xeus.Remoting.SubscribeShoutRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.SubscribeShoutRequest>.Empty;

        static SubscribeShoutRequest()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.SubscribeShoutRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.SubscribeShoutRequest>.Empty = new global::Omnius.Xeus.Remoting.SubscribeShoutRequest(global::Omnius.Core.Cryptography.OmniSignature.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public SubscribeShoutRequest(global::Omnius.Core.Cryptography.OmniSignature signature, string registrant)
        {
            if (signature is null) throw new global::System.ArgumentNullException("signature");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.Signature = signature;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (signature != default) ___h.Add(signature.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Remoting.SubscribeShoutRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.SubscribeShoutRequest? left, global::Omnius.Xeus.Remoting.SubscribeShoutRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.SubscribeShoutRequest? left, global::Omnius.Xeus.Remoting.SubscribeShoutRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.SubscribeShoutRequest) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.SubscribeShoutRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.SubscribeShoutRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Signature != target.Signature) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.SubscribeShoutRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.SubscribeShoutRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.SubscribeShoutRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.SubscribeShoutRequest(p_signature, p_registrant);
            }
        }
    }
    public sealed partial class UnsubscribeShoutRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest>.Formatter;
        public static global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest>.Empty;

        static UnsubscribeShoutRequest()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest>.Empty = new global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest(global::Omnius.Core.Cryptography.OmniSignature.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public UnsubscribeShoutRequest(global::Omnius.Core.Cryptography.OmniSignature signature, string registrant)
        {
            if (signature is null) throw new global::System.ArgumentNullException("signature");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.Signature = signature;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (signature != default) ___h.Add(signature.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest? left, global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest? left, global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Signature != target.Signature) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest(p_signature, p_registrant);
            }
        }
    }
    public sealed partial class ExportShoutRequest : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportShoutRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.ExportShoutRequest> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportShoutRequest>.Formatter;
        public static global::Omnius.Xeus.Remoting.ExportShoutRequest Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportShoutRequest>.Empty;

        static ExportShoutRequest()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportShoutRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportShoutRequest>.Empty = new global::Omnius.Xeus.Remoting.ExportShoutRequest(global::Omnius.Core.Cryptography.OmniSignature.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public ExportShoutRequest(global::Omnius.Core.Cryptography.OmniSignature signature)
        {
            if (signature is null) throw new global::System.ArgumentNullException("signature");

            this.Signature = signature;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (signature != default) ___h.Add(signature.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }

        public static global::Omnius.Xeus.Remoting.ExportShoutRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.ExportShoutRequest? left, global::Omnius.Xeus.Remoting.ExportShoutRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.ExportShoutRequest? left, global::Omnius.Xeus.Remoting.ExportShoutRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.ExportShoutRequest) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.ExportShoutRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.ExportShoutRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Signature != target.Signature) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.ExportShoutRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.ExportShoutRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.ExportShoutRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.ExportShoutRequest(p_signature);
            }
        }
    }
    public sealed partial class ExportShoutResult : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportShoutResult>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.ExportShoutResult> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportShoutResult>.Formatter;
        public static global::Omnius.Xeus.Remoting.ExportShoutResult Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportShoutResult>.Empty;

        static ExportShoutResult()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportShoutResult>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Remoting.ExportShoutResult>.Empty = new global::Omnius.Xeus.Remoting.ExportShoutResult(null);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public ExportShoutResult(global::Omnius.Xeus.Models.Shout? shout)
        {
            this.Shout = shout;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (shout != default) ___h.Add(shout.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Xeus.Models.Shout? Shout { get; }

        public static global::Omnius.Xeus.Remoting.ExportShoutResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Remoting.ExportShoutResult? left, global::Omnius.Xeus.Remoting.ExportShoutResult? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Remoting.ExportShoutResult? left, global::Omnius.Xeus.Remoting.ExportShoutResult? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Remoting.ExportShoutResult) return false;
            return this.Equals((global::Omnius.Xeus.Remoting.ExportShoutResult)other);
        }
        public bool Equals(global::Omnius.Xeus.Remoting.ExportShoutResult? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if ((this.Shout is null) != (target.Shout is null)) return false;
            if ((this.Shout is not null) && (target.Shout is not null) && this.Shout != target.Shout) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Remoting.ExportShoutResult>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Remoting.ExportShoutResult value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Shout != null)
                {
                    w.Write((uint)1);
                    global::Omnius.Xeus.Models.Shout.Formatter.Serialize(ref w, value.Shout, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Remoting.ExportShoutResult Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Models.Shout? p_shout = null;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_shout = global::Omnius.Xeus.Models.Shout.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Remoting.ExportShoutResult(p_shout);
            }
        }
    }
    public interface IXeusService
    {
        global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Remoting.GetReportResult> GetReportAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Remoting.GetMyNodeLocationResult> GetMyNodeLocationAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask AddCloudNodeLocationsAsync(global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Remoting.PublishFileInStorageResult> PublishFileInStorageAsync(global::Omnius.Xeus.Remoting.PublishFileInStorageRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Remoting.PublishFileInMemoryResult> PublishFileInMemoryAsync(global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask UnpublishFileInStorageAsync(global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask UnpublishFileInMemoryAsync(global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask SubscribeFileAsync(global::Omnius.Xeus.Remoting.SubscribeFileRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask UnsubscribeFileAsync(global::Omnius.Xeus.Remoting.UnsubscribeFileRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask ExportFileToStorageAsync(global::Omnius.Xeus.Remoting.ExportFileToStorageRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Remoting.ExportFileToMemoryResult> ExportFileToMemoryAsync(global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask PublishShoutAsync(global::Omnius.Xeus.Remoting.PublishShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask UnpublishShoutAsync(global::Omnius.Xeus.Remoting.UnpublishShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask SubscribeShoutAsync(global::Omnius.Xeus.Remoting.SubscribeShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask UnsubscribeShoutAsync(global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Remoting.ExportShoutResult> ExportShoutAsync(global::Omnius.Xeus.Remoting.ExportShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    }
    public class XeusServiceRemoting
    {
        public class Client<TError> : global::Omnius.Xeus.Remoting.IXeusService
            where TError : global::Omnius.Core.RocketPack.IRocketMessage<TError>
        {
            private readonly global::Omnius.Core.RocketPack.Remoting.IRocketRemotingCallerFactory<TError> _callerFactory;
            private readonly global::Omnius.Core.IBytesPool _bytesPool;
            public Client(global::Omnius.Core.RocketPack.Remoting.IRocketRemotingCallerFactory<TError> callerFactory, global::Omnius.Core.IBytesPool bytesPool)
            {
                _callerFactory = callerFactory;
                _bytesPool = bytesPool;
            }
            public async global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Remoting.GetReportResult> GetReportAsync(global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(1, cancellationToken);
                return await caller.CallFunctionAsync<global::Omnius.Xeus.Remoting.GetReportResult>(cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Remoting.GetMyNodeLocationResult> GetMyNodeLocationAsync(global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(2, cancellationToken);
                return await caller.CallFunctionAsync<global::Omnius.Xeus.Remoting.GetMyNodeLocationResult>(cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask AddCloudNodeLocationsAsync(global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(3, cancellationToken);
                await caller.CallActionAsync<global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Remoting.PublishFileInStorageResult> PublishFileInStorageAsync(global::Omnius.Xeus.Remoting.PublishFileInStorageRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(4, cancellationToken);
                return await caller.CallFunctionAsync<global::Omnius.Xeus.Remoting.PublishFileInStorageRequest, global::Omnius.Xeus.Remoting.PublishFileInStorageResult>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Remoting.PublishFileInMemoryResult> PublishFileInMemoryAsync(global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(5, cancellationToken);
                return await caller.CallFunctionAsync<global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest, global::Omnius.Xeus.Remoting.PublishFileInMemoryResult>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask UnpublishFileInStorageAsync(global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(6, cancellationToken);
                await caller.CallActionAsync<global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask UnpublishFileInMemoryAsync(global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(7, cancellationToken);
                await caller.CallActionAsync<global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask SubscribeFileAsync(global::Omnius.Xeus.Remoting.SubscribeFileRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(8, cancellationToken);
                await caller.CallActionAsync<global::Omnius.Xeus.Remoting.SubscribeFileRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask UnsubscribeFileAsync(global::Omnius.Xeus.Remoting.UnsubscribeFileRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(9, cancellationToken);
                await caller.CallActionAsync<global::Omnius.Xeus.Remoting.UnsubscribeFileRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask ExportFileToStorageAsync(global::Omnius.Xeus.Remoting.ExportFileToStorageRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(10, cancellationToken);
                await caller.CallActionAsync<global::Omnius.Xeus.Remoting.ExportFileToStorageRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Remoting.ExportFileToMemoryResult> ExportFileToMemoryAsync(global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(11, cancellationToken);
                return await caller.CallFunctionAsync<global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest, global::Omnius.Xeus.Remoting.ExportFileToMemoryResult>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask PublishShoutAsync(global::Omnius.Xeus.Remoting.PublishShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(12, cancellationToken);
                await caller.CallActionAsync<global::Omnius.Xeus.Remoting.PublishShoutRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask UnpublishShoutAsync(global::Omnius.Xeus.Remoting.UnpublishShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(13, cancellationToken);
                await caller.CallActionAsync<global::Omnius.Xeus.Remoting.UnpublishShoutRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask SubscribeShoutAsync(global::Omnius.Xeus.Remoting.SubscribeShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(14, cancellationToken);
                await caller.CallActionAsync<global::Omnius.Xeus.Remoting.SubscribeShoutRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask UnsubscribeShoutAsync(global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(15, cancellationToken);
                await caller.CallActionAsync<global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Remoting.ExportShoutResult> ExportShoutAsync(global::Omnius.Xeus.Remoting.ExportShoutRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                await using var caller = await _callerFactory.CreateAsync(16, cancellationToken);
                return await caller.CallFunctionAsync<global::Omnius.Xeus.Remoting.ExportShoutRequest, global::Omnius.Xeus.Remoting.ExportShoutResult>(param, cancellationToken);
            }
        }
        public class Server<TError>
            where TError : global::Omnius.Core.RocketPack.IRocketMessage<TError>
        {
            private readonly global::Omnius.Xeus.Remoting.IXeusService _service;
            private readonly global::Omnius.Core.RocketPack.Remoting.IRocketRemotingListenerFactory<TError> _listenerFactory;
            private readonly global::Omnius.Core.IBytesPool _bytesPool;
            public Server(global::Omnius.Xeus.Remoting.IXeusService service, global::Omnius.Core.RocketPack.Remoting.IRocketRemotingListenerFactory<TError> listenerFactory, global::Omnius.Core.IBytesPool bytesPool)
            {
                _service = service;
                _listenerFactory = listenerFactory;
                _bytesPool = bytesPool;
            }
            public async global::System.Threading.Tasks.Task EventLoopAsync(global::System.Threading.CancellationToken cancellationToken = default)
            {
                while (!cancellationToken.IsCancellationRequested)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    await using var listener = await _listenerFactory.CreateAsync(cancellationToken);
                    switch (listener.FunctionId)
                    {
                        case 1:
                            {
                                await listener.ListenFunctionAsync<global::Omnius.Xeus.Remoting.GetReportResult>(_service.GetReportAsync, cancellationToken);
                            }
                            break;
                        case 2:
                            {
                                await listener.ListenFunctionAsync<global::Omnius.Xeus.Remoting.GetMyNodeLocationResult>(_service.GetMyNodeLocationAsync, cancellationToken);
                            }
                            break;
                        case 3:
                            {
                                await listener.ListenActionAsync<global::Omnius.Xeus.Remoting.AddCloudNodeLocationsRequest>(_service.AddCloudNodeLocationsAsync, cancellationToken);
                            }
                            break;
                        case 4:
                            {
                                await listener.ListenFunctionAsync<global::Omnius.Xeus.Remoting.PublishFileInStorageRequest, global::Omnius.Xeus.Remoting.PublishFileInStorageResult>(_service.PublishFileInStorageAsync, cancellationToken);
                            }
                            break;
                        case 5:
                            {
                                await listener.ListenFunctionAsync<global::Omnius.Xeus.Remoting.PublishFileInMemoryRequest, global::Omnius.Xeus.Remoting.PublishFileInMemoryResult>(_service.PublishFileInMemoryAsync, cancellationToken);
                            }
                            break;
                        case 6:
                            {
                                await listener.ListenActionAsync<global::Omnius.Xeus.Remoting.UnpublishFileInStorageRequest>(_service.UnpublishFileInStorageAsync, cancellationToken);
                            }
                            break;
                        case 7:
                            {
                                await listener.ListenActionAsync<global::Omnius.Xeus.Remoting.UnpublishFileInMemoryRequest>(_service.UnpublishFileInMemoryAsync, cancellationToken);
                            }
                            break;
                        case 8:
                            {
                                await listener.ListenActionAsync<global::Omnius.Xeus.Remoting.SubscribeFileRequest>(_service.SubscribeFileAsync, cancellationToken);
                            }
                            break;
                        case 9:
                            {
                                await listener.ListenActionAsync<global::Omnius.Xeus.Remoting.UnsubscribeFileRequest>(_service.UnsubscribeFileAsync, cancellationToken);
                            }
                            break;
                        case 10:
                            {
                                await listener.ListenActionAsync<global::Omnius.Xeus.Remoting.ExportFileToStorageRequest>(_service.ExportFileToStorageAsync, cancellationToken);
                            }
                            break;
                        case 11:
                            {
                                await listener.ListenFunctionAsync<global::Omnius.Xeus.Remoting.ExportFileToMemoryRequest, global::Omnius.Xeus.Remoting.ExportFileToMemoryResult>(_service.ExportFileToMemoryAsync, cancellationToken);
                            }
                            break;
                        case 12:
                            {
                                await listener.ListenActionAsync<global::Omnius.Xeus.Remoting.PublishShoutRequest>(_service.PublishShoutAsync, cancellationToken);
                            }
                            break;
                        case 13:
                            {
                                await listener.ListenActionAsync<global::Omnius.Xeus.Remoting.UnpublishShoutRequest>(_service.UnpublishShoutAsync, cancellationToken);
                            }
                            break;
                        case 14:
                            {
                                await listener.ListenActionAsync<global::Omnius.Xeus.Remoting.SubscribeShoutRequest>(_service.SubscribeShoutAsync, cancellationToken);
                            }
                            break;
                        case 15:
                            {
                                await listener.ListenActionAsync<global::Omnius.Xeus.Remoting.UnsubscribeShoutRequest>(_service.UnsubscribeShoutAsync, cancellationToken);
                            }
                            break;
                        case 16:
                            {
                                await listener.ListenFunctionAsync<global::Omnius.Xeus.Remoting.ExportShoutRequest, global::Omnius.Xeus.Remoting.ExportShoutResult>(_service.ExportShoutAsync, cancellationToken);
                            }
                            break;
                    }
                }
            }
        }
    }
}
