// <auto-generated/>
#nullable enable

namespace Omnius.Xeus.Daemon
{
    public sealed partial class GetReportResult : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.GetReportResult>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.GetReportResult> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.GetReportResult>.Formatter;
        public static global::Omnius.Xeus.Daemon.GetReportResult Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.GetReportResult>.Empty;

        static GetReportResult()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.GetReportResult>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.GetReportResult>.Empty = new global::Omnius.Xeus.Daemon.GetReportResult();
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public GetReportResult()
        {

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                return ___h.ToHashCode();
            });
        }


        public static global::Omnius.Xeus.Daemon.GetReportResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.GetReportResult? left, global::Omnius.Xeus.Daemon.GetReportResult? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.GetReportResult? left, global::Omnius.Xeus.Daemon.GetReportResult? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.GetReportResult) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.GetReportResult)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.GetReportResult? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.GetReportResult>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.GetReportResult value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.GetReportResult Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();


                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                    }
                }

                return new global::Omnius.Xeus.Daemon.GetReportResult();
            }
        }
    }
    public sealed partial class GetMyNodeProfileResult : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.GetMyNodeProfileResult>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.GetMyNodeProfileResult> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.GetMyNodeProfileResult>.Formatter;
        public static global::Omnius.Xeus.Daemon.GetMyNodeProfileResult Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.GetMyNodeProfileResult>.Empty;

        static GetMyNodeProfileResult()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.GetMyNodeProfileResult>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.GetMyNodeProfileResult>.Empty = new global::Omnius.Xeus.Daemon.GetMyNodeProfileResult(global::Omnius.Xeus.Engines.Models.NodeProfile.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public GetMyNodeProfileResult(global::Omnius.Xeus.Engines.Models.NodeProfile nodeProfile)
        {
            if (nodeProfile is null) throw new global::System.ArgumentNullException("nodeProfile");

            this.NodeProfile = nodeProfile;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (nodeProfile != default) ___h.Add(nodeProfile.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Xeus.Engines.Models.NodeProfile NodeProfile { get; }

        public static global::Omnius.Xeus.Daemon.GetMyNodeProfileResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.GetMyNodeProfileResult? left, global::Omnius.Xeus.Daemon.GetMyNodeProfileResult? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.GetMyNodeProfileResult? left, global::Omnius.Xeus.Daemon.GetMyNodeProfileResult? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.GetMyNodeProfileResult) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.GetMyNodeProfileResult)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.GetMyNodeProfileResult? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.NodeProfile != target.NodeProfile) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.GetMyNodeProfileResult>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.GetMyNodeProfileResult value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.NodeProfile != global::Omnius.Xeus.Engines.Models.NodeProfile.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Xeus.Engines.Models.NodeProfile.Formatter.Serialize(ref w, value.NodeProfile, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.GetMyNodeProfileResult Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Models.NodeProfile p_nodeProfile = global::Omnius.Xeus.Engines.Models.NodeProfile.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_nodeProfile = global::Omnius.Xeus.Engines.Models.NodeProfile.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.GetMyNodeProfileResult(p_nodeProfile);
            }
        }
    }
    public sealed partial class AddCloudNodeProfilesRequest : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest>.Formatter;
        public static global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest>.Empty;

        static AddCloudNodeProfilesRequest()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest>.Empty = new global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest(global::System.Array.Empty<global::Omnius.Xeus.Engines.Models.NodeProfile>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxNodeProfilesCount = 32;

        public AddCloudNodeProfilesRequest(global::Omnius.Xeus.Engines.Models.NodeProfile[] nodeProfiles)
        {
            if (nodeProfiles is null) throw new global::System.ArgumentNullException("nodeProfiles");
            if (nodeProfiles.Length > 32) throw new global::System.ArgumentOutOfRangeException("nodeProfiles");
            foreach (var n in nodeProfiles)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.NodeProfiles = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Models.NodeProfile>(nodeProfiles);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in nodeProfiles)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Models.NodeProfile> NodeProfiles { get; }

        public static global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest? left, global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest? left, global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.NodeProfiles, target.NodeProfiles)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.NodeProfiles.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.NodeProfiles.Count);
                    foreach (var n in value.NodeProfiles)
                    {
                        global::Omnius.Xeus.Engines.Models.NodeProfile.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Models.NodeProfile[] p_nodeProfiles = global::System.Array.Empty<global::Omnius.Xeus.Engines.Models.NodeProfile>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_nodeProfiles = new global::Omnius.Xeus.Engines.Models.NodeProfile[length];
                                for (int i = 0; i < p_nodeProfiles.Length; i++)
                                {
                                    p_nodeProfiles[i] = global::Omnius.Xeus.Engines.Models.NodeProfile.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest(p_nodeProfiles);
            }
        }
    }
    public sealed partial class PublishFileContentRequest : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishFileContentRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.PublishFileContentRequest> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishFileContentRequest>.Formatter;
        public static global::Omnius.Xeus.Daemon.PublishFileContentRequest Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishFileContentRequest>.Empty;

        static PublishFileContentRequest()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishFileContentRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishFileContentRequest>.Empty = new global::Omnius.Xeus.Daemon.PublishFileContentRequest(string.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxFilePathLength = 2147483647;
        public static readonly int MaxRegistrantLength = 2147483647;

        public PublishFileContentRequest(string filePath, string registrant)
        {
            if (filePath is null) throw new global::System.ArgumentNullException("filePath");
            if (filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.FilePath = filePath;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (filePath != default) ___h.Add(filePath.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string FilePath { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Daemon.PublishFileContentRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.PublishFileContentRequest? left, global::Omnius.Xeus.Daemon.PublishFileContentRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.PublishFileContentRequest? left, global::Omnius.Xeus.Daemon.PublishFileContentRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.PublishFileContentRequest) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.PublishFileContentRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.PublishFileContentRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.FilePath != target.FilePath) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.PublishFileContentRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.PublishFileContentRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.FilePath != string.Empty)
                {
                    w.Write((uint)1);
                    w.Write(value.FilePath);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.PublishFileContentRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string p_filePath = string.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_filePath = r.GetString(2147483647);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.PublishFileContentRequest(p_filePath, p_registrant);
            }
        }
    }
    public sealed partial class PublishFileContentResult : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishFileContentResult>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.PublishFileContentResult> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishFileContentResult>.Formatter;
        public static global::Omnius.Xeus.Daemon.PublishFileContentResult Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishFileContentResult>.Empty;

        static PublishFileContentResult()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishFileContentResult>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishFileContentResult>.Empty = new global::Omnius.Xeus.Daemon.PublishFileContentResult(global::Omnius.Core.Cryptography.OmniHash.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public PublishFileContentResult(global::Omnius.Core.Cryptography.OmniHash hash)
        {
            this.Hash = hash;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (hash != default) ___h.Add(hash.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash Hash { get; }

        public static global::Omnius.Xeus.Daemon.PublishFileContentResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.PublishFileContentResult? left, global::Omnius.Xeus.Daemon.PublishFileContentResult? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.PublishFileContentResult? left, global::Omnius.Xeus.Daemon.PublishFileContentResult? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.PublishFileContentResult) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.PublishFileContentResult)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.PublishFileContentResult? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Hash != target.Hash) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.PublishFileContentResult>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.PublishFileContentResult value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Hash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.Hash, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.PublishFileContentResult Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_hash = global::Omnius.Core.Cryptography.OmniHash.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_hash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.PublishFileContentResult(p_hash);
            }
        }
    }
    public sealed partial class PublishMemoryContentRequest : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishMemoryContentRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.PublishMemoryContentRequest> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishMemoryContentRequest>.Formatter;
        public static global::Omnius.Xeus.Daemon.PublishMemoryContentRequest Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishMemoryContentRequest>.Empty;

        static PublishMemoryContentRequest()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishMemoryContentRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishMemoryContentRequest>.Empty = new global::Omnius.Xeus.Daemon.PublishMemoryContentRequest(global::System.ReadOnlyMemory<byte>.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxMemoryLength = 33554432;
        public static readonly int MaxRegistrantLength = 2147483647;

        public PublishMemoryContentRequest(global::System.ReadOnlyMemory<byte> memory, string registrant)
        {
            if (memory.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("memory");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.Memory = memory;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (!memory.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(memory.Span));
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::System.ReadOnlyMemory<byte> Memory { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Daemon.PublishMemoryContentRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.PublishMemoryContentRequest? left, global::Omnius.Xeus.Daemon.PublishMemoryContentRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.PublishMemoryContentRequest? left, global::Omnius.Xeus.Daemon.PublishMemoryContentRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.PublishMemoryContentRequest) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.PublishMemoryContentRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.PublishMemoryContentRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.BytesOperations.Equals(this.Memory.Span, target.Memory.Span)) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.PublishMemoryContentRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.PublishMemoryContentRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (!value.Memory.IsEmpty)
                {
                    w.Write((uint)1);
                    w.Write(value.Memory.Span);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.PublishMemoryContentRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::System.ReadOnlyMemory<byte> p_memory = global::System.ReadOnlyMemory<byte>.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_memory = r.GetMemory(33554432);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.PublishMemoryContentRequest(p_memory, p_registrant);
            }
        }
    }
    public sealed partial class PublishMemoryContentResult : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishMemoryContentResult>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.PublishMemoryContentResult> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishMemoryContentResult>.Formatter;
        public static global::Omnius.Xeus.Daemon.PublishMemoryContentResult Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishMemoryContentResult>.Empty;

        static PublishMemoryContentResult()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishMemoryContentResult>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishMemoryContentResult>.Empty = new global::Omnius.Xeus.Daemon.PublishMemoryContentResult(global::Omnius.Core.Cryptography.OmniHash.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public PublishMemoryContentResult(global::Omnius.Core.Cryptography.OmniHash hash)
        {
            this.Hash = hash;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (hash != default) ___h.Add(hash.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash Hash { get; }

        public static global::Omnius.Xeus.Daemon.PublishMemoryContentResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.PublishMemoryContentResult? left, global::Omnius.Xeus.Daemon.PublishMemoryContentResult? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.PublishMemoryContentResult? left, global::Omnius.Xeus.Daemon.PublishMemoryContentResult? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.PublishMemoryContentResult) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.PublishMemoryContentResult)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.PublishMemoryContentResult? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Hash != target.Hash) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.PublishMemoryContentResult>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.PublishMemoryContentResult value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Hash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.Hash, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.PublishMemoryContentResult Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_hash = global::Omnius.Core.Cryptography.OmniHash.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_hash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.PublishMemoryContentResult(p_hash);
            }
        }
    }
    public sealed partial class UnpublishFileContentRequest : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishFileContentRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.UnpublishFileContentRequest> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishFileContentRequest>.Formatter;
        public static global::Omnius.Xeus.Daemon.UnpublishFileContentRequest Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishFileContentRequest>.Empty;

        static UnpublishFileContentRequest()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishFileContentRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishFileContentRequest>.Empty = new global::Omnius.Xeus.Daemon.UnpublishFileContentRequest(string.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxFilePathLength = 2147483647;
        public static readonly int MaxRegistrantLength = 2147483647;

        public UnpublishFileContentRequest(string filePath, string registrant)
        {
            if (filePath is null) throw new global::System.ArgumentNullException("filePath");
            if (filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.FilePath = filePath;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (filePath != default) ___h.Add(filePath.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string FilePath { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Daemon.UnpublishFileContentRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.UnpublishFileContentRequest? left, global::Omnius.Xeus.Daemon.UnpublishFileContentRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.UnpublishFileContentRequest? left, global::Omnius.Xeus.Daemon.UnpublishFileContentRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.UnpublishFileContentRequest) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.UnpublishFileContentRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.UnpublishFileContentRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.FilePath != target.FilePath) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.UnpublishFileContentRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.UnpublishFileContentRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.FilePath != string.Empty)
                {
                    w.Write((uint)1);
                    w.Write(value.FilePath);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.UnpublishFileContentRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string p_filePath = string.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_filePath = r.GetString(2147483647);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.UnpublishFileContentRequest(p_filePath, p_registrant);
            }
        }
    }
    public sealed partial class UnpublishMemoryContentRequest : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest>.Formatter;
        public static global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest>.Empty;

        static UnpublishMemoryContentRequest()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest>.Empty = new global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest(global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public UnpublishMemoryContentRequest(global::Omnius.Core.Cryptography.OmniHash rootHash, string registrant)
        {
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.RootHash = rootHash;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest? left, global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest? left, global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.RootHash != target.RootHash) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest(p_rootHash, p_registrant);
            }
        }
    }
    public sealed partial class SubscribeContentRequest : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.SubscribeContentRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.SubscribeContentRequest> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.SubscribeContentRequest>.Formatter;
        public static global::Omnius.Xeus.Daemon.SubscribeContentRequest Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.SubscribeContentRequest>.Empty;

        static SubscribeContentRequest()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.SubscribeContentRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.SubscribeContentRequest>.Empty = new global::Omnius.Xeus.Daemon.SubscribeContentRequest(global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public SubscribeContentRequest(global::Omnius.Core.Cryptography.OmniHash rootHash, string registrant)
        {
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.RootHash = rootHash;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Daemon.SubscribeContentRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.SubscribeContentRequest? left, global::Omnius.Xeus.Daemon.SubscribeContentRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.SubscribeContentRequest? left, global::Omnius.Xeus.Daemon.SubscribeContentRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.SubscribeContentRequest) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.SubscribeContentRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.SubscribeContentRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.RootHash != target.RootHash) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.SubscribeContentRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.SubscribeContentRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.SubscribeContentRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.SubscribeContentRequest(p_rootHash, p_registrant);
            }
        }
    }
    public sealed partial class UnsubscribeContentRequest : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnsubscribeContentRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.UnsubscribeContentRequest> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnsubscribeContentRequest>.Formatter;
        public static global::Omnius.Xeus.Daemon.UnsubscribeContentRequest Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnsubscribeContentRequest>.Empty;

        static UnsubscribeContentRequest()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnsubscribeContentRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnsubscribeContentRequest>.Empty = new global::Omnius.Xeus.Daemon.UnsubscribeContentRequest(global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public UnsubscribeContentRequest(global::Omnius.Core.Cryptography.OmniHash rootHash, string registrant)
        {
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.RootHash = rootHash;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Daemon.UnsubscribeContentRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.UnsubscribeContentRequest? left, global::Omnius.Xeus.Daemon.UnsubscribeContentRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.UnsubscribeContentRequest? left, global::Omnius.Xeus.Daemon.UnsubscribeContentRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.UnsubscribeContentRequest) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.UnsubscribeContentRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.UnsubscribeContentRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.RootHash != target.RootHash) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.UnsubscribeContentRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.UnsubscribeContentRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.UnsubscribeContentRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.UnsubscribeContentRequest(p_rootHash, p_registrant);
            }
        }
    }
    public sealed partial class ExportFileContentRequest : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportFileContentRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.ExportFileContentRequest> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportFileContentRequest>.Formatter;
        public static global::Omnius.Xeus.Daemon.ExportFileContentRequest Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportFileContentRequest>.Empty;

        static ExportFileContentRequest()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportFileContentRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportFileContentRequest>.Empty = new global::Omnius.Xeus.Daemon.ExportFileContentRequest(global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxFilePathLength = 2147483647;

        public ExportFileContentRequest(global::Omnius.Core.Cryptography.OmniHash rootHash, string filePath)
        {
            if (filePath is null) throw new global::System.ArgumentNullException("filePath");
            if (filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");

            this.RootHash = rootHash;
            this.FilePath = filePath;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                if (filePath != default) ___h.Add(filePath.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
        public string FilePath { get; }

        public static global::Omnius.Xeus.Daemon.ExportFileContentRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.ExportFileContentRequest? left, global::Omnius.Xeus.Daemon.ExportFileContentRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.ExportFileContentRequest? left, global::Omnius.Xeus.Daemon.ExportFileContentRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.ExportFileContentRequest) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.ExportFileContentRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.ExportFileContentRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.RootHash != target.RootHash) return false;
            if (this.FilePath != target.FilePath) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.ExportFileContentRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.ExportFileContentRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                if (value.FilePath != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.FilePath);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.ExportFileContentRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
                string p_filePath = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_filePath = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.ExportFileContentRequest(p_rootHash, p_filePath);
            }
        }
    }
    public sealed partial class ExportMemoryContentRequest : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportMemoryContentRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.ExportMemoryContentRequest> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportMemoryContentRequest>.Formatter;
        public static global::Omnius.Xeus.Daemon.ExportMemoryContentRequest Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportMemoryContentRequest>.Empty;

        static ExportMemoryContentRequest()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportMemoryContentRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportMemoryContentRequest>.Empty = new global::Omnius.Xeus.Daemon.ExportMemoryContentRequest(global::Omnius.Core.Cryptography.OmniHash.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public ExportMemoryContentRequest(global::Omnius.Core.Cryptography.OmniHash rootHash)
        {
            this.RootHash = rootHash;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }

        public static global::Omnius.Xeus.Daemon.ExportMemoryContentRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.ExportMemoryContentRequest? left, global::Omnius.Xeus.Daemon.ExportMemoryContentRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.ExportMemoryContentRequest? left, global::Omnius.Xeus.Daemon.ExportMemoryContentRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.ExportMemoryContentRequest) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.ExportMemoryContentRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.ExportMemoryContentRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.RootHash != target.RootHash) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.ExportMemoryContentRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.ExportMemoryContentRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.ExportMemoryContentRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.ExportMemoryContentRequest(p_rootHash);
            }
        }
    }
    public sealed partial class ExportMemoryContentResult : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportMemoryContentResult>, global::System.IDisposable
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.ExportMemoryContentResult> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportMemoryContentResult>.Formatter;
        public static global::Omnius.Xeus.Daemon.ExportMemoryContentResult Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportMemoryContentResult>.Empty;

        static ExportMemoryContentResult()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportMemoryContentResult>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportMemoryContentResult>.Empty = new global::Omnius.Xeus.Daemon.ExportMemoryContentResult(null);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxMemoryLength = 33554432;

        public ExportMemoryContentResult(global::System.Buffers.IMemoryOwner<byte>? memory)
        {
            if (memory is not null && memory.Memory.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("memory");

            _memory = memory;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (memory is not null && !memory.Memory.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(memory.Memory.Span));
                return ___h.ToHashCode();
            });
        }

        private readonly global::System.Buffers.IMemoryOwner<byte>? _memory;
        public global::System.ReadOnlyMemory<byte>? Memory => _memory?.Memory;

        public static global::Omnius.Xeus.Daemon.ExportMemoryContentResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.ExportMemoryContentResult? left, global::Omnius.Xeus.Daemon.ExportMemoryContentResult? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.ExportMemoryContentResult? left, global::Omnius.Xeus.Daemon.ExportMemoryContentResult? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.ExportMemoryContentResult) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.ExportMemoryContentResult)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.ExportMemoryContentResult? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if ((this.Memory is null) != (target.Memory is null)) return false;
            if ((this.Memory is not null) && (target.Memory is not null) && !global::Omnius.Core.BytesOperations.Equals(this.Memory.Value.Span, target.Memory.Value.Span)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        public void Dispose()
        {
            _memory?.Dispose();
        }

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.ExportMemoryContentResult>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.ExportMemoryContentResult value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Memory != null)
                {
                    w.Write((uint)1);
                    w.Write(value.Memory.Value.Span);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.ExportMemoryContentResult Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::System.Buffers.IMemoryOwner<byte>? p_memory = null;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_memory = r.GetRecyclableMemory(33554432);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.ExportMemoryContentResult(p_memory);
            }
        }
    }
    public sealed partial class PublishDeclaredMessageRequest : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest>.Formatter;
        public static global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest>.Empty;

        static PublishDeclaredMessageRequest()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest>.Empty = new global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest(global::Omnius.Xeus.Engines.Models.DeclaredMessage.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public PublishDeclaredMessageRequest(global::Omnius.Xeus.Engines.Models.DeclaredMessage message, string registrant)
        {
            if (message is null) throw new global::System.ArgumentNullException("message");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.Message = message;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (message != default) ___h.Add(message.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Xeus.Engines.Models.DeclaredMessage Message { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest? left, global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest? left, global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Message != target.Message) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Message != global::Omnius.Xeus.Engines.Models.DeclaredMessage.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Xeus.Engines.Models.DeclaredMessage.Formatter.Serialize(ref w, value.Message, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Models.DeclaredMessage p_message = global::Omnius.Xeus.Engines.Models.DeclaredMessage.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_message = global::Omnius.Xeus.Engines.Models.DeclaredMessage.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest(p_message, p_registrant);
            }
        }
    }
    public sealed partial class UnpublishDeclaredMessageRequest : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest>.Formatter;
        public static global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest>.Empty;

        static UnpublishDeclaredMessageRequest()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest>.Empty = new global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest(global::Omnius.Core.Cryptography.OmniSignature.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public UnpublishDeclaredMessageRequest(global::Omnius.Core.Cryptography.OmniSignature signature, string registrant)
        {
            if (signature is null) throw new global::System.ArgumentNullException("signature");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.Signature = signature;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (signature != default) ___h.Add(signature.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest? left, global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest? left, global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Signature != target.Signature) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest(p_signature, p_registrant);
            }
        }
    }
    public sealed partial class SubscribeDeclaredMessageRequest : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest>.Formatter;
        public static global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest>.Empty;

        static SubscribeDeclaredMessageRequest()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest>.Empty = new global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest(global::Omnius.Core.Cryptography.OmniSignature.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public SubscribeDeclaredMessageRequest(global::Omnius.Core.Cryptography.OmniSignature signature, string registrant)
        {
            if (signature is null) throw new global::System.ArgumentNullException("signature");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.Signature = signature;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (signature != default) ___h.Add(signature.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest? left, global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest? left, global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Signature != target.Signature) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest(p_signature, p_registrant);
            }
        }
    }
    public sealed partial class UnsubscribeDeclaredMessageRequest : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest>.Formatter;
        public static global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest>.Empty;

        static UnsubscribeDeclaredMessageRequest()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest>.Empty = new global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest(global::Omnius.Core.Cryptography.OmniSignature.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public UnsubscribeDeclaredMessageRequest(global::Omnius.Core.Cryptography.OmniSignature signature, string registrant)
        {
            if (signature is null) throw new global::System.ArgumentNullException("signature");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.Signature = signature;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (signature != default) ___h.Add(signature.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest? left, global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest? left, global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Signature != target.Signature) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest(p_signature, p_registrant);
            }
        }
    }
    public sealed partial class ExportDeclaredMessageRequest : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest>.Formatter;
        public static global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest>.Empty;

        static ExportDeclaredMessageRequest()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest>.Empty = new global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest(global::Omnius.Core.Cryptography.OmniSignature.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public ExportDeclaredMessageRequest(global::Omnius.Core.Cryptography.OmniSignature signature)
        {
            if (signature is null) throw new global::System.ArgumentNullException("signature");

            this.Signature = signature;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (signature != default) ___h.Add(signature.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }

        public static global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest? left, global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest? left, global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Signature != target.Signature) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest(p_signature);
            }
        }
    }
    public sealed partial class ExportDeclaredMessageResult : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult>.Formatter;
        public static global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult>.Empty;

        static ExportDeclaredMessageResult()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult>.Empty = new global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult(null);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public ExportDeclaredMessageResult(global::Omnius.Xeus.Engines.Models.DeclaredMessage? declaredMessage)
        {
            this.DeclaredMessage = declaredMessage;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (declaredMessage != default) ___h.Add(declaredMessage.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Xeus.Engines.Models.DeclaredMessage? DeclaredMessage { get; }

        public static global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult? left, global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult? left, global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult) return false;
            return this.Equals((global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult)other);
        }
        public bool Equals(global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if ((this.DeclaredMessage is null) != (target.DeclaredMessage is null)) return false;
            if ((this.DeclaredMessage is not null) && (target.DeclaredMessage is not null) && this.DeclaredMessage != target.DeclaredMessage) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.DeclaredMessage != null)
                {
                    w.Write((uint)1);
                    global::Omnius.Xeus.Engines.Models.DeclaredMessage.Formatter.Serialize(ref w, value.DeclaredMessage, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Models.DeclaredMessage? p_declaredMessage = null;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_declaredMessage = global::Omnius.Xeus.Engines.Models.DeclaredMessage.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult(p_declaredMessage);
            }
        }
    }
    public interface IXeusService
    {
        global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Daemon.GetReportResult> GetReportAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Daemon.GetMyNodeProfileResult> GetMyNodeProfileAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask AddCloudNodeProfilesAsync(global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Daemon.PublishFileContentResult> PublishFileContentAsync(global::Omnius.Xeus.Daemon.PublishFileContentRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Daemon.PublishMemoryContentResult> PublishMemoryContentAsync(global::Omnius.Xeus.Daemon.PublishMemoryContentRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask UnpublishFileContentAsync(global::Omnius.Xeus.Daemon.UnpublishFileContentRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask UnpublishMemoryContentAsync(global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask SubscribeContentAsync(global::Omnius.Xeus.Daemon.SubscribeContentRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask UnsubscribeContentAsync(global::Omnius.Xeus.Daemon.UnsubscribeContentRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask ExportFileContentAsync(global::Omnius.Xeus.Daemon.ExportFileContentRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Daemon.ExportMemoryContentResult> ExportMemoryContentAsync(global::Omnius.Xeus.Daemon.ExportMemoryContentRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask PublishDeclaredMessageAsync(global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask UnpublishDeclaredMessageAsync(global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask SubscribeDeclaredMessageAsync(global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask UnsubscribeDeclaredMessageAsync(global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest param, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult> ExportDeclaredMessageAsync(global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest param, global::System.Threading.CancellationToken cancellationToken = default);
    }
    public class XeusServiceRemoting
    {
        public class Client : global::Omnius.Core.AsyncDisposableBase, global::Omnius.Xeus.Daemon.IXeusService
        {
            private readonly global::Omnius.Core.Net.Connections.IConnection _connection;
            private readonly global::Omnius.Core.IBytesPool _bytesPool;
            private readonly global::Omnius.Core.Remoting.IRemoting _remoting;
            public Client(global::Omnius.Core.Net.Connections.IConnection connection, global::Omnius.Core.IBytesPool bytesPool)
            {
                _connection = connection;
                _bytesPool = bytesPool;
                _remoting = global::Omnius.Core.Remoting.Remoting.Factory.Create(_connection, global::Omnius.Core.Remoting.RemotingMessenger.Factory, global::Omnius.Core.Remoting.RemotingFunction.Factory, _bytesPool);
            }
            protected override async global::System.Threading.Tasks.ValueTask OnDisposeAsync()
            {
                await _remoting.DisposeAsync();
            }
            public async global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Daemon.GetReportResult> GetReportAsync(global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(1, cancellationToken);
                return await function.CallFunctionAsync<global::Omnius.Xeus.Daemon.GetReportResult>(cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Daemon.GetMyNodeProfileResult> GetMyNodeProfileAsync(global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(2, cancellationToken);
                return await function.CallFunctionAsync<global::Omnius.Xeus.Daemon.GetMyNodeProfileResult>(cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask AddCloudNodeProfilesAsync(global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(3, cancellationToken);
                await function.CallActionAsync<global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Daemon.PublishFileContentResult> PublishFileContentAsync(global::Omnius.Xeus.Daemon.PublishFileContentRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(4, cancellationToken);
                return await function.CallFunctionAsync<global::Omnius.Xeus.Daemon.PublishFileContentRequest, global::Omnius.Xeus.Daemon.PublishFileContentResult>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Daemon.PublishMemoryContentResult> PublishMemoryContentAsync(global::Omnius.Xeus.Daemon.PublishMemoryContentRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(5, cancellationToken);
                return await function.CallFunctionAsync<global::Omnius.Xeus.Daemon.PublishMemoryContentRequest, global::Omnius.Xeus.Daemon.PublishMemoryContentResult>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask UnpublishFileContentAsync(global::Omnius.Xeus.Daemon.UnpublishFileContentRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(6, cancellationToken);
                await function.CallActionAsync<global::Omnius.Xeus.Daemon.UnpublishFileContentRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask UnpublishMemoryContentAsync(global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(7, cancellationToken);
                await function.CallActionAsync<global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask SubscribeContentAsync(global::Omnius.Xeus.Daemon.SubscribeContentRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(8, cancellationToken);
                await function.CallActionAsync<global::Omnius.Xeus.Daemon.SubscribeContentRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask UnsubscribeContentAsync(global::Omnius.Xeus.Daemon.UnsubscribeContentRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(9, cancellationToken);
                await function.CallActionAsync<global::Omnius.Xeus.Daemon.UnsubscribeContentRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask ExportFileContentAsync(global::Omnius.Xeus.Daemon.ExportFileContentRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(10, cancellationToken);
                await function.CallActionAsync<global::Omnius.Xeus.Daemon.ExportFileContentRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Daemon.ExportMemoryContentResult> ExportMemoryContentAsync(global::Omnius.Xeus.Daemon.ExportMemoryContentRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(11, cancellationToken);
                return await function.CallFunctionAsync<global::Omnius.Xeus.Daemon.ExportMemoryContentRequest, global::Omnius.Xeus.Daemon.ExportMemoryContentResult>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask PublishDeclaredMessageAsync(global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(12, cancellationToken);
                await function.CallActionAsync<global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask UnpublishDeclaredMessageAsync(global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(13, cancellationToken);
                await function.CallActionAsync<global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask SubscribeDeclaredMessageAsync(global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(14, cancellationToken);
                await function.CallActionAsync<global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask UnsubscribeDeclaredMessageAsync(global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(15, cancellationToken);
                await function.CallActionAsync<global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest>(param, cancellationToken);
            }
            public async global::System.Threading.Tasks.ValueTask<global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult> ExportDeclaredMessageAsync(global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest param, global::System.Threading.CancellationToken cancellationToken = default)
            {
                using var function = await _remoting.ConnectAsync(16, cancellationToken);
                return await function.CallFunctionAsync<global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest, global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult>(param, cancellationToken);
            }
        }
        public class Server : global::Omnius.Core.AsyncDisposableBase
        {
            private readonly global::Omnius.Xeus.Daemon.IXeusService _service;
            private readonly global::Omnius.Core.Net.Connections.IConnection _connection;
            private readonly global::Omnius.Core.IBytesPool _bytesPool;
            private readonly global::Omnius.Core.Remoting.IRemoting _remoting;
            public Server(global::Omnius.Xeus.Daemon.IXeusService service, global::Omnius.Core.Net.Connections.IConnection connection, global::Omnius.Core.IBytesPool bytesPool)
            {
                _service = service;
                _connection = connection;
                _bytesPool = bytesPool;
                _remoting = global::Omnius.Core.Remoting.Remoting.Factory.Create(_connection, global::Omnius.Core.Remoting.RemotingMessenger.Factory, global::Omnius.Core.Remoting.RemotingFunction.Factory, _bytesPool);
            }
            protected override async global::System.Threading.Tasks.ValueTask OnDisposeAsync()
            {
                await _remoting.DisposeAsync();
            }
            public async global::System.Threading.Tasks.Task EventLoopAsync(global::System.Threading.CancellationToken cancellationToken = default)
            {
                while (!cancellationToken.IsCancellationRequested)
                {
                    cancellationToken.ThrowIfCancellationRequested();
                    using var function = await _remoting.AcceptAsync(cancellationToken);
                    switch (function.Id)
                    {
                        case 1:
                            {
                                await function.ListenFunctionAsync<global::Omnius.Xeus.Daemon.GetReportResult>(_service.GetReportAsync, cancellationToken);
                            }
                            break;
                        case 2:
                            {
                                await function.ListenFunctionAsync<global::Omnius.Xeus.Daemon.GetMyNodeProfileResult>(_service.GetMyNodeProfileAsync, cancellationToken);
                            }
                            break;
                        case 3:
                            {
                                await function.ListenActionAsync<global::Omnius.Xeus.Daemon.AddCloudNodeProfilesRequest>(_service.AddCloudNodeProfilesAsync, cancellationToken);
                            }
                            break;
                        case 4:
                            {
                                await function.ListenFunctionAsync<global::Omnius.Xeus.Daemon.PublishFileContentRequest, global::Omnius.Xeus.Daemon.PublishFileContentResult>(_service.PublishFileContentAsync, cancellationToken);
                            }
                            break;
                        case 5:
                            {
                                await function.ListenFunctionAsync<global::Omnius.Xeus.Daemon.PublishMemoryContentRequest, global::Omnius.Xeus.Daemon.PublishMemoryContentResult>(_service.PublishMemoryContentAsync, cancellationToken);
                            }
                            break;
                        case 6:
                            {
                                await function.ListenActionAsync<global::Omnius.Xeus.Daemon.UnpublishFileContentRequest>(_service.UnpublishFileContentAsync, cancellationToken);
                            }
                            break;
                        case 7:
                            {
                                await function.ListenActionAsync<global::Omnius.Xeus.Daemon.UnpublishMemoryContentRequest>(_service.UnpublishMemoryContentAsync, cancellationToken);
                            }
                            break;
                        case 8:
                            {
                                await function.ListenActionAsync<global::Omnius.Xeus.Daemon.SubscribeContentRequest>(_service.SubscribeContentAsync, cancellationToken);
                            }
                            break;
                        case 9:
                            {
                                await function.ListenActionAsync<global::Omnius.Xeus.Daemon.UnsubscribeContentRequest>(_service.UnsubscribeContentAsync, cancellationToken);
                            }
                            break;
                        case 10:
                            {
                                await function.ListenActionAsync<global::Omnius.Xeus.Daemon.ExportFileContentRequest>(_service.ExportFileContentAsync, cancellationToken);
                            }
                            break;
                        case 11:
                            {
                                await function.ListenFunctionAsync<global::Omnius.Xeus.Daemon.ExportMemoryContentRequest, global::Omnius.Xeus.Daemon.ExportMemoryContentResult>(_service.ExportMemoryContentAsync, cancellationToken);
                            }
                            break;
                        case 12:
                            {
                                await function.ListenActionAsync<global::Omnius.Xeus.Daemon.PublishDeclaredMessageRequest>(_service.PublishDeclaredMessageAsync, cancellationToken);
                            }
                            break;
                        case 13:
                            {
                                await function.ListenActionAsync<global::Omnius.Xeus.Daemon.UnpublishDeclaredMessageRequest>(_service.UnpublishDeclaredMessageAsync, cancellationToken);
                            }
                            break;
                        case 14:
                            {
                                await function.ListenActionAsync<global::Omnius.Xeus.Daemon.SubscribeDeclaredMessageRequest>(_service.SubscribeDeclaredMessageAsync, cancellationToken);
                            }
                            break;
                        case 15:
                            {
                                await function.ListenActionAsync<global::Omnius.Xeus.Daemon.UnsubscribeDeclaredMessageRequest>(_service.UnsubscribeDeclaredMessageAsync, cancellationToken);
                            }
                            break;
                        case 16:
                            {
                                await function.ListenFunctionAsync<global::Omnius.Xeus.Daemon.ExportDeclaredMessageRequest, global::Omnius.Xeus.Daemon.ExportDeclaredMessageResult>(_service.ExportDeclaredMessageAsync, cancellationToken);
                            }
                            break;
                    }
                }
            }
        }
    }
}
