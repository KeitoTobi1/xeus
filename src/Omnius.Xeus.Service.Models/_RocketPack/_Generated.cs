// <auto-generated/>
#nullable enable

namespace Omnius.Xeus.Service.Models
{
    public enum SessionHandshakeType : byte
    {
        Unknown = 0,
        Connected = 1,
        Accepted = 2,
    }
    public sealed partial class NodeLocation : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.NodeLocation>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.NodeLocation> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.NodeLocation>.Formatter;
        public static global::Omnius.Xeus.Service.Models.NodeLocation Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.NodeLocation>.Empty;

        static NodeLocation()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.NodeLocation>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.NodeLocation>.Empty = new global::Omnius.Xeus.Service.Models.NodeLocation(global::System.Array.Empty<global::Omnius.Core.Net.OmniAddress>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxAddressesCount = 32;

        public NodeLocation(global::Omnius.Core.Net.OmniAddress[] addresses)
        {
            if (addresses is null) throw new global::System.ArgumentNullException("addresses");
            if (addresses.Length > 32) throw new global::System.ArgumentOutOfRangeException("addresses");
            foreach (var n in addresses)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.Addresses = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Net.OmniAddress>(addresses);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in addresses)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Net.OmniAddress> Addresses { get; }

        public static global::Omnius.Xeus.Service.Models.NodeLocation Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.NodeLocation? left, global::Omnius.Xeus.Service.Models.NodeLocation? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.NodeLocation? left, global::Omnius.Xeus.Service.Models.NodeLocation? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.NodeLocation) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.NodeLocation)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.NodeLocation? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Addresses, target.Addresses)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.NodeLocation>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.NodeLocation value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Addresses.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.Addresses.Count);
                    foreach (var n in value.Addresses)
                    {
                        global::Omnius.Core.Net.OmniAddress.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.NodeLocation Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Net.OmniAddress[] p_addresses = global::System.Array.Empty<global::Omnius.Core.Net.OmniAddress>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_addresses = new global::Omnius.Core.Net.OmniAddress[length];
                                for (int i = 0; i < p_addresses.Length; i++)
                                {
                                    p_addresses[i] = global::Omnius.Core.Net.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.NodeLocation(p_addresses);
            }
        }
    }
    public sealed partial class ContentClue : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ContentClue>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.ContentClue> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ContentClue>.Formatter;
        public static global::Omnius.Xeus.Service.Models.ContentClue Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ContentClue>.Empty;

        static ContentClue()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ContentClue>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ContentClue>.Empty = new global::Omnius.Xeus.Service.Models.ContentClue(string.Empty, global::Omnius.Core.Cryptography.OmniHash.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxSchemeLength = 256;

        public ContentClue(string scheme, global::Omnius.Core.Cryptography.OmniHash contentHash)
        {
            if (scheme is null) throw new global::System.ArgumentNullException("scheme");
            if (scheme.Length > 256) throw new global::System.ArgumentOutOfRangeException("scheme");
            this.Scheme = scheme;
            this.ContentHash = contentHash;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (scheme != default) ___h.Add(scheme.GetHashCode());
                if (contentHash != default) ___h.Add(contentHash.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string Scheme { get; }
        public global::Omnius.Core.Cryptography.OmniHash ContentHash { get; }

        public static global::Omnius.Xeus.Service.Models.ContentClue Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.ContentClue? left, global::Omnius.Xeus.Service.Models.ContentClue? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.ContentClue? left, global::Omnius.Xeus.Service.Models.ContentClue? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.ContentClue) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.ContentClue)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.ContentClue? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Scheme != target.Scheme) return false;
            if (this.ContentHash != target.ContentHash) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.ContentClue>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.ContentClue value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Scheme != string.Empty)
                {
                    w.Write((uint)1);
                    w.Write(value.Scheme);
                }
                if (value.ContentHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)2);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.ContentHash, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.ContentClue Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string p_scheme = string.Empty;
                global::Omnius.Core.Cryptography.OmniHash p_contentHash = global::Omnius.Core.Cryptography.OmniHash.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_scheme = r.GetString(256);
                                break;
                            }
                        case 2:
                            {
                                p_contentHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.ContentClue(p_scheme, p_contentHash);
            }
        }
    }
    public sealed partial class Shout : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.Shout>, global::System.IDisposable
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.Shout> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.Shout>.Formatter;
        public static global::Omnius.Xeus.Service.Models.Shout Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.Shout>.Empty;

        static Shout()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.Shout>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.Shout>.Empty = new global::Omnius.Xeus.Service.Models.Shout(global::Omnius.Core.RocketPack.Timestamp.Zero, global::Omnius.Core.MemoryOwner<byte>.Empty, null);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxValueLength = 33554432;

        public Shout(global::Omnius.Core.RocketPack.Timestamp creationTime, global::System.Buffers.IMemoryOwner<byte> value, global::Omnius.Core.Cryptography.OmniCertificate? certificate)
        {
            if (value is null) throw new global::System.ArgumentNullException("value");
            if (value.Memory.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("value");
            this.CreationTime = creationTime;
            _value = value;
            this.Certificate = certificate;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (creationTime != default) ___h.Add(creationTime.GetHashCode());
                if (!value.Memory.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(value.Memory.Span));
                if (certificate != default) ___h.Add(certificate.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.RocketPack.Timestamp CreationTime { get; }
        private readonly global::System.Buffers.IMemoryOwner<byte> _value;
        public global::System.ReadOnlyMemory<byte> Value => _value.Memory;
        public global::Omnius.Core.Cryptography.OmniCertificate? Certificate { get; }

        public static global::Omnius.Xeus.Service.Models.Shout Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.Shout? left, global::Omnius.Xeus.Service.Models.Shout? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.Shout? left, global::Omnius.Xeus.Service.Models.Shout? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.Shout) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.Shout)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.Shout? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.CreationTime != target.CreationTime) return false;
            if (!global::Omnius.Core.BytesOperations.Equals(this.Value.Span, target.Value.Span)) return false;
            if ((this.Certificate is null) != (target.Certificate is null)) return false;
            if ((this.Certificate is not null) && (target.Certificate is not null) && this.Certificate != target.Certificate) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        public void Dispose()
        {
            _value?.Dispose();
        }

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.Shout>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.Shout value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.CreationTime != global::Omnius.Core.RocketPack.Timestamp.Zero)
                {
                    w.Write((uint)1);
                    w.Write(value.CreationTime);
                }
                if (!value.Value.IsEmpty)
                {
                    w.Write((uint)2);
                    w.Write(value.Value.Span);
                }
                if (value.Certificate != null)
                {
                    w.Write((uint)3);
                    global::Omnius.Core.Cryptography.OmniCertificate.Formatter.Serialize(ref w, value.Certificate, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.Shout Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.RocketPack.Timestamp p_creationTime = global::Omnius.Core.RocketPack.Timestamp.Zero;
                global::System.Buffers.IMemoryOwner<byte> p_value = global::Omnius.Core.MemoryOwner<byte>.Empty;
                global::Omnius.Core.Cryptography.OmniCertificate? p_certificate = null;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_creationTime = r.GetTimestamp();
                                break;
                            }
                        case 2:
                            {
                                p_value = r.GetRecyclableMemory(33554432);
                                break;
                            }
                        case 3:
                            {
                                p_certificate = global::Omnius.Core.Cryptography.OmniCertificate.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.Shout(p_creationTime, p_value, p_certificate);
            }
        }
    }
    public sealed partial class ConsistencyReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ConsistencyReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.ConsistencyReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ConsistencyReport>.Formatter;
        public static global::Omnius.Xeus.Service.Models.ConsistencyReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ConsistencyReport>.Empty;

        static ConsistencyReport()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ConsistencyReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ConsistencyReport>.Empty = new global::Omnius.Xeus.Service.Models.ConsistencyReport(0, 0, 0);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public ConsistencyReport(uint badBlockCount, uint checkedBlockCount, uint totalBlockCount)
        {
            this.BadBlockCount = badBlockCount;
            this.CheckedBlockCount = checkedBlockCount;
            this.TotalBlockCount = totalBlockCount;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (badBlockCount != default) ___h.Add(badBlockCount.GetHashCode());
                if (checkedBlockCount != default) ___h.Add(checkedBlockCount.GetHashCode());
                if (totalBlockCount != default) ___h.Add(totalBlockCount.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public uint BadBlockCount { get; }
        public uint CheckedBlockCount { get; }
        public uint TotalBlockCount { get; }

        public static global::Omnius.Xeus.Service.Models.ConsistencyReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.ConsistencyReport? left, global::Omnius.Xeus.Service.Models.ConsistencyReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.ConsistencyReport? left, global::Omnius.Xeus.Service.Models.ConsistencyReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.ConsistencyReport) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.ConsistencyReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.ConsistencyReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.BadBlockCount != target.BadBlockCount) return false;
            if (this.CheckedBlockCount != target.CheckedBlockCount) return false;
            if (this.TotalBlockCount != target.TotalBlockCount) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.ConsistencyReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.ConsistencyReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.BadBlockCount != 0)
                {
                    w.Write((uint)1);
                    w.Write(value.BadBlockCount);
                }
                if (value.CheckedBlockCount != 0)
                {
                    w.Write((uint)2);
                    w.Write(value.CheckedBlockCount);
                }
                if (value.TotalBlockCount != 0)
                {
                    w.Write((uint)3);
                    w.Write(value.TotalBlockCount);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.ConsistencyReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                uint p_badBlockCount = 0;
                uint p_checkedBlockCount = 0;
                uint p_totalBlockCount = 0;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_badBlockCount = r.GetUInt32();
                                break;
                            }
                        case 2:
                            {
                                p_checkedBlockCount = r.GetUInt32();
                                break;
                            }
                        case 3:
                            {
                                p_totalBlockCount = r.GetUInt32();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.ConsistencyReport(p_badBlockCount, p_checkedBlockCount, p_totalBlockCount);
            }
        }
    }
    public sealed partial class SessionReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SessionReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.SessionReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SessionReport>.Formatter;
        public static global::Omnius.Xeus.Service.Models.SessionReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SessionReport>.Empty;

        static SessionReport()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SessionReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SessionReport>.Empty = new global::Omnius.Xeus.Service.Models.SessionReport(string.Empty, (global::Omnius.Xeus.Service.Models.SessionHandshakeType)0, global::Omnius.Core.Net.OmniAddress.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxServiceNameLength = 256;

        public SessionReport(string serviceName, global::Omnius.Xeus.Service.Models.SessionHandshakeType handshakeType, global::Omnius.Core.Net.OmniAddress address)
        {
            if (serviceName is null) throw new global::System.ArgumentNullException("serviceName");
            if (serviceName.Length > 256) throw new global::System.ArgumentOutOfRangeException("serviceName");
            if (address is null) throw new global::System.ArgumentNullException("address");

            this.ServiceName = serviceName;
            this.HandshakeType = handshakeType;
            this.Address = address;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (serviceName != default) ___h.Add(serviceName.GetHashCode());
                if (handshakeType != default) ___h.Add(handshakeType.GetHashCode());
                if (address != default) ___h.Add(address.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string ServiceName { get; }
        public global::Omnius.Xeus.Service.Models.SessionHandshakeType HandshakeType { get; }
        public global::Omnius.Core.Net.OmniAddress Address { get; }

        public static global::Omnius.Xeus.Service.Models.SessionReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.SessionReport? left, global::Omnius.Xeus.Service.Models.SessionReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.SessionReport? left, global::Omnius.Xeus.Service.Models.SessionReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.SessionReport) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.SessionReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.SessionReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ServiceName != target.ServiceName) return false;
            if (this.HandshakeType != target.HandshakeType) return false;
            if (this.Address != target.Address) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.SessionReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.SessionReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ServiceName != string.Empty)
                {
                    w.Write((uint)1);
                    w.Write(value.ServiceName);
                }
                if (value.HandshakeType != (global::Omnius.Xeus.Service.Models.SessionHandshakeType)0)
                {
                    w.Write((uint)2);
                    w.Write((ulong)value.HandshakeType);
                }
                if (value.Address != global::Omnius.Core.Net.OmniAddress.Empty)
                {
                    w.Write((uint)3);
                    global::Omnius.Core.Net.OmniAddress.Formatter.Serialize(ref w, value.Address, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.SessionReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string p_serviceName = string.Empty;
                global::Omnius.Xeus.Service.Models.SessionHandshakeType p_handshakeType = (global::Omnius.Xeus.Service.Models.SessionHandshakeType)0;
                global::Omnius.Core.Net.OmniAddress p_address = global::Omnius.Core.Net.OmniAddress.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_serviceName = r.GetString(256);
                                break;
                            }
                        case 2:
                            {
                                p_handshakeType = (global::Omnius.Xeus.Service.Models.SessionHandshakeType)r.GetUInt64();
                                break;
                            }
                        case 3:
                            {
                                p_address = global::Omnius.Core.Net.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.SessionReport(p_serviceName, p_handshakeType, p_address);
            }
        }
    }
    public sealed partial class NodeFinderReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.NodeFinderReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.NodeFinderReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.NodeFinderReport>.Formatter;
        public static global::Omnius.Xeus.Service.Models.NodeFinderReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.NodeFinderReport>.Empty;

        static NodeFinderReport()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.NodeFinderReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.NodeFinderReport>.Empty = new global::Omnius.Xeus.Service.Models.NodeFinderReport(0, 0, global::System.Array.Empty<global::Omnius.Xeus.Service.Models.SessionReport>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxSessionsCount = 2147483647;

        public NodeFinderReport(uint connectedSessionCount, uint acceptedSessionCount, global::Omnius.Xeus.Service.Models.SessionReport[] sessions)
        {
            if (sessions is null) throw new global::System.ArgumentNullException("sessions");
            if (sessions.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("sessions");
            foreach (var n in sessions)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.ConnectedSessionCount = connectedSessionCount;
            this.AcceptedSessionCount = acceptedSessionCount;
            this.Sessions = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Service.Models.SessionReport>(sessions);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (connectedSessionCount != default) ___h.Add(connectedSessionCount.GetHashCode());
                if (acceptedSessionCount != default) ___h.Add(acceptedSessionCount.GetHashCode());
                foreach (var n in sessions)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public uint ConnectedSessionCount { get; }
        public uint AcceptedSessionCount { get; }
        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Service.Models.SessionReport> Sessions { get; }

        public static global::Omnius.Xeus.Service.Models.NodeFinderReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.NodeFinderReport? left, global::Omnius.Xeus.Service.Models.NodeFinderReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.NodeFinderReport? left, global::Omnius.Xeus.Service.Models.NodeFinderReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.NodeFinderReport) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.NodeFinderReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.NodeFinderReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConnectedSessionCount != target.ConnectedSessionCount) return false;
            if (this.AcceptedSessionCount != target.AcceptedSessionCount) return false;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Sessions, target.Sessions)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.NodeFinderReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.NodeFinderReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConnectedSessionCount != 0)
                {
                    w.Write((uint)1);
                    w.Write(value.ConnectedSessionCount);
                }
                if (value.AcceptedSessionCount != 0)
                {
                    w.Write((uint)2);
                    w.Write(value.AcceptedSessionCount);
                }
                if (value.Sessions.Count != 0)
                {
                    w.Write((uint)3);
                    w.Write((uint)value.Sessions.Count);
                    foreach (var n in value.Sessions)
                    {
                        global::Omnius.Xeus.Service.Models.SessionReport.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.NodeFinderReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                uint p_connectedSessionCount = 0;
                uint p_acceptedSessionCount = 0;
                global::Omnius.Xeus.Service.Models.SessionReport[] p_sessions = global::System.Array.Empty<global::Omnius.Xeus.Service.Models.SessionReport>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_connectedSessionCount = r.GetUInt32();
                                break;
                            }
                        case 2:
                            {
                                p_acceptedSessionCount = r.GetUInt32();
                                break;
                            }
                        case 3:
                            {
                                var length = r.GetUInt32();
                                p_sessions = new global::Omnius.Xeus.Service.Models.SessionReport[length];
                                for (int i = 0; i < p_sessions.Length; i++)
                                {
                                    p_sessions[i] = global::Omnius.Xeus.Service.Models.SessionReport.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.NodeFinderReport(p_connectedSessionCount, p_acceptedSessionCount, p_sessions);
            }
        }
    }
    public sealed partial class FileExchangerReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.FileExchangerReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.FileExchangerReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.FileExchangerReport>.Formatter;
        public static global::Omnius.Xeus.Service.Models.FileExchangerReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.FileExchangerReport>.Empty;

        static FileExchangerReport()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.FileExchangerReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.FileExchangerReport>.Empty = new global::Omnius.Xeus.Service.Models.FileExchangerReport(0, 0, global::System.Array.Empty<global::Omnius.Xeus.Service.Models.SessionReport>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxSessionsCount = 2147483647;

        public FileExchangerReport(uint connectedSessionCount, uint acceptedSessionCount, global::Omnius.Xeus.Service.Models.SessionReport[] sessions)
        {
            if (sessions is null) throw new global::System.ArgumentNullException("sessions");
            if (sessions.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("sessions");
            foreach (var n in sessions)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.ConnectedSessionCount = connectedSessionCount;
            this.AcceptedSessionCount = acceptedSessionCount;
            this.Sessions = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Service.Models.SessionReport>(sessions);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (connectedSessionCount != default) ___h.Add(connectedSessionCount.GetHashCode());
                if (acceptedSessionCount != default) ___h.Add(acceptedSessionCount.GetHashCode());
                foreach (var n in sessions)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public uint ConnectedSessionCount { get; }
        public uint AcceptedSessionCount { get; }
        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Service.Models.SessionReport> Sessions { get; }

        public static global::Omnius.Xeus.Service.Models.FileExchangerReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.FileExchangerReport? left, global::Omnius.Xeus.Service.Models.FileExchangerReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.FileExchangerReport? left, global::Omnius.Xeus.Service.Models.FileExchangerReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.FileExchangerReport) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.FileExchangerReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.FileExchangerReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConnectedSessionCount != target.ConnectedSessionCount) return false;
            if (this.AcceptedSessionCount != target.AcceptedSessionCount) return false;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Sessions, target.Sessions)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.FileExchangerReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.FileExchangerReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConnectedSessionCount != 0)
                {
                    w.Write((uint)1);
                    w.Write(value.ConnectedSessionCount);
                }
                if (value.AcceptedSessionCount != 0)
                {
                    w.Write((uint)2);
                    w.Write(value.AcceptedSessionCount);
                }
                if (value.Sessions.Count != 0)
                {
                    w.Write((uint)3);
                    w.Write((uint)value.Sessions.Count);
                    foreach (var n in value.Sessions)
                    {
                        global::Omnius.Xeus.Service.Models.SessionReport.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.FileExchangerReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                uint p_connectedSessionCount = 0;
                uint p_acceptedSessionCount = 0;
                global::Omnius.Xeus.Service.Models.SessionReport[] p_sessions = global::System.Array.Empty<global::Omnius.Xeus.Service.Models.SessionReport>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_connectedSessionCount = r.GetUInt32();
                                break;
                            }
                        case 2:
                            {
                                p_acceptedSessionCount = r.GetUInt32();
                                break;
                            }
                        case 3:
                            {
                                var length = r.GetUInt32();
                                p_sessions = new global::Omnius.Xeus.Service.Models.SessionReport[length];
                                for (int i = 0; i < p_sessions.Length; i++)
                                {
                                    p_sessions[i] = global::Omnius.Xeus.Service.Models.SessionReport.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.FileExchangerReport(p_connectedSessionCount, p_acceptedSessionCount, p_sessions);
            }
        }
    }
    public sealed partial class PublishedFileStorageReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedFileStorageReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.PublishedFileStorageReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedFileStorageReport>.Formatter;
        public static global::Omnius.Xeus.Service.Models.PublishedFileStorageReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedFileStorageReport>.Empty;

        static PublishedFileStorageReport()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedFileStorageReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedFileStorageReport>.Empty = new global::Omnius.Xeus.Service.Models.PublishedFileStorageReport(global::System.Array.Empty<global::Omnius.Xeus.Service.Models.PublishedFileReport>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxPublishedFilesCount = 2147483647;

        public PublishedFileStorageReport(global::Omnius.Xeus.Service.Models.PublishedFileReport[] publishedFiles)
        {
            if (publishedFiles is null) throw new global::System.ArgumentNullException("publishedFiles");
            if (publishedFiles.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("publishedFiles");
            foreach (var n in publishedFiles)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.PublishedFiles = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Service.Models.PublishedFileReport>(publishedFiles);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in publishedFiles)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Service.Models.PublishedFileReport> PublishedFiles { get; }

        public static global::Omnius.Xeus.Service.Models.PublishedFileStorageReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.PublishedFileStorageReport? left, global::Omnius.Xeus.Service.Models.PublishedFileStorageReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.PublishedFileStorageReport? left, global::Omnius.Xeus.Service.Models.PublishedFileStorageReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.PublishedFileStorageReport) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.PublishedFileStorageReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.PublishedFileStorageReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.PublishedFiles, target.PublishedFiles)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.PublishedFileStorageReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.PublishedFileStorageReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.PublishedFiles.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.PublishedFiles.Count);
                    foreach (var n in value.PublishedFiles)
                    {
                        global::Omnius.Xeus.Service.Models.PublishedFileReport.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.PublishedFileStorageReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Service.Models.PublishedFileReport[] p_publishedFiles = global::System.Array.Empty<global::Omnius.Xeus.Service.Models.PublishedFileReport>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_publishedFiles = new global::Omnius.Xeus.Service.Models.PublishedFileReport[length];
                                for (int i = 0; i < p_publishedFiles.Length; i++)
                                {
                                    p_publishedFiles[i] = global::Omnius.Xeus.Service.Models.PublishedFileReport.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.PublishedFileStorageReport(p_publishedFiles);
            }
        }
    }
    public sealed partial class PublishedFileReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedFileReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.PublishedFileReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedFileReport>.Formatter;
        public static global::Omnius.Xeus.Service.Models.PublishedFileReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedFileReport>.Empty;

        static PublishedFileReport()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedFileReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedFileReport>.Empty = new global::Omnius.Xeus.Service.Models.PublishedFileReport(null, null, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxFilePathLength = 2147483647;
        public static readonly int MaxRegistrantLength = 2147483647;

        public PublishedFileReport(string? filePath, global::Omnius.Core.Cryptography.OmniHash? rootHash, string registrant)
        {
            if (filePath is not null && filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.FilePath = filePath;
            this.RootHash = rootHash;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (filePath != default) ___h.Add(filePath.GetHashCode());
                if (rootHash is not null) ___h.Add(rootHash.Value.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string? FilePath { get; }
        public global::Omnius.Core.Cryptography.OmniHash? RootHash { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Service.Models.PublishedFileReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.PublishedFileReport? left, global::Omnius.Xeus.Service.Models.PublishedFileReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.PublishedFileReport? left, global::Omnius.Xeus.Service.Models.PublishedFileReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.PublishedFileReport) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.PublishedFileReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.PublishedFileReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.FilePath != target.FilePath) return false;
            if ((this.RootHash is null) != (target.RootHash is null)) return false;
            if ((this.RootHash is not null) && (target.RootHash is not null) && this.RootHash != target.RootHash) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.PublishedFileReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.PublishedFileReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.FilePath != null)
                {
                    w.Write((uint)1);
                    w.Write(value.FilePath);
                }
                if (value.RootHash != null)
                {
                    w.Write((uint)2);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash.Value, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)3);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.PublishedFileReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string? p_filePath = null;
                global::Omnius.Core.Cryptography.OmniHash? p_rootHash = null;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_filePath = r.GetString(2147483647);
                                break;
                            }
                        case 2:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 3:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.PublishedFileReport(p_filePath, p_rootHash, p_registrant);
            }
        }
    }
    public sealed partial class SubscribedFileStorageReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport>.Formatter;
        public static global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport>.Empty;

        static SubscribedFileStorageReport()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport>.Empty = new global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport(global::System.Array.Empty<global::Omnius.Xeus.Service.Models.SubscribedFileReport>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxSubscribedFilesCount = 2147483647;

        public SubscribedFileStorageReport(global::Omnius.Xeus.Service.Models.SubscribedFileReport[] subscribedFiles)
        {
            if (subscribedFiles is null) throw new global::System.ArgumentNullException("subscribedFiles");
            if (subscribedFiles.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("subscribedFiles");
            foreach (var n in subscribedFiles)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.SubscribedFiles = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Service.Models.SubscribedFileReport>(subscribedFiles);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in subscribedFiles)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Service.Models.SubscribedFileReport> SubscribedFiles { get; }

        public static global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport? left, global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport? left, global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.SubscribedFiles, target.SubscribedFiles)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.SubscribedFiles.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.SubscribedFiles.Count);
                    foreach (var n in value.SubscribedFiles)
                    {
                        global::Omnius.Xeus.Service.Models.SubscribedFileReport.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Service.Models.SubscribedFileReport[] p_subscribedFiles = global::System.Array.Empty<global::Omnius.Xeus.Service.Models.SubscribedFileReport>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_subscribedFiles = new global::Omnius.Xeus.Service.Models.SubscribedFileReport[length];
                                for (int i = 0; i < p_subscribedFiles.Length; i++)
                                {
                                    p_subscribedFiles[i] = global::Omnius.Xeus.Service.Models.SubscribedFileReport.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.SubscribedFileStorageReport(p_subscribedFiles);
            }
        }
    }
    public sealed partial class SubscribedFileReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedFileReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.SubscribedFileReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedFileReport>.Formatter;
        public static global::Omnius.Xeus.Service.Models.SubscribedFileReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedFileReport>.Empty;

        static SubscribedFileReport()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedFileReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedFileReport>.Empty = new global::Omnius.Xeus.Service.Models.SubscribedFileReport(null, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public SubscribedFileReport(global::Omnius.Core.Cryptography.OmniHash? rootHash, string registrant)
        {
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.RootHash = rootHash;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash is not null) ___h.Add(rootHash.Value.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash? RootHash { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Service.Models.SubscribedFileReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.SubscribedFileReport? left, global::Omnius.Xeus.Service.Models.SubscribedFileReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.SubscribedFileReport? left, global::Omnius.Xeus.Service.Models.SubscribedFileReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.SubscribedFileReport) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.SubscribedFileReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.SubscribedFileReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if ((this.RootHash is null) != (target.RootHash is null)) return false;
            if ((this.RootHash is not null) && (target.RootHash is not null) && this.RootHash != target.RootHash) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.SubscribedFileReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.SubscribedFileReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != null)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash.Value, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.SubscribedFileReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash? p_rootHash = null;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.SubscribedFileReport(p_rootHash, p_registrant);
            }
        }
    }
    public sealed partial class ShoutExchangerReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ShoutExchangerReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.ShoutExchangerReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ShoutExchangerReport>.Formatter;
        public static global::Omnius.Xeus.Service.Models.ShoutExchangerReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ShoutExchangerReport>.Empty;

        static ShoutExchangerReport()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ShoutExchangerReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.ShoutExchangerReport>.Empty = new global::Omnius.Xeus.Service.Models.ShoutExchangerReport(0, 0, global::System.Array.Empty<global::Omnius.Xeus.Service.Models.SessionReport>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxSessionsCount = 2147483647;

        public ShoutExchangerReport(uint connectedSessionCount, uint acceptedSessionCount, global::Omnius.Xeus.Service.Models.SessionReport[] sessions)
        {
            if (sessions is null) throw new global::System.ArgumentNullException("sessions");
            if (sessions.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("sessions");
            foreach (var n in sessions)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.ConnectedSessionCount = connectedSessionCount;
            this.AcceptedSessionCount = acceptedSessionCount;
            this.Sessions = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Service.Models.SessionReport>(sessions);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (connectedSessionCount != default) ___h.Add(connectedSessionCount.GetHashCode());
                if (acceptedSessionCount != default) ___h.Add(acceptedSessionCount.GetHashCode());
                foreach (var n in sessions)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public uint ConnectedSessionCount { get; }
        public uint AcceptedSessionCount { get; }
        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Service.Models.SessionReport> Sessions { get; }

        public static global::Omnius.Xeus.Service.Models.ShoutExchangerReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.ShoutExchangerReport? left, global::Omnius.Xeus.Service.Models.ShoutExchangerReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.ShoutExchangerReport? left, global::Omnius.Xeus.Service.Models.ShoutExchangerReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.ShoutExchangerReport) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.ShoutExchangerReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.ShoutExchangerReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConnectedSessionCount != target.ConnectedSessionCount) return false;
            if (this.AcceptedSessionCount != target.AcceptedSessionCount) return false;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Sessions, target.Sessions)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.ShoutExchangerReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.ShoutExchangerReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConnectedSessionCount != 0)
                {
                    w.Write((uint)1);
                    w.Write(value.ConnectedSessionCount);
                }
                if (value.AcceptedSessionCount != 0)
                {
                    w.Write((uint)2);
                    w.Write(value.AcceptedSessionCount);
                }
                if (value.Sessions.Count != 0)
                {
                    w.Write((uint)3);
                    w.Write((uint)value.Sessions.Count);
                    foreach (var n in value.Sessions)
                    {
                        global::Omnius.Xeus.Service.Models.SessionReport.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.ShoutExchangerReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                uint p_connectedSessionCount = 0;
                uint p_acceptedSessionCount = 0;
                global::Omnius.Xeus.Service.Models.SessionReport[] p_sessions = global::System.Array.Empty<global::Omnius.Xeus.Service.Models.SessionReport>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_connectedSessionCount = r.GetUInt32();
                                break;
                            }
                        case 2:
                            {
                                p_acceptedSessionCount = r.GetUInt32();
                                break;
                            }
                        case 3:
                            {
                                var length = r.GetUInt32();
                                p_sessions = new global::Omnius.Xeus.Service.Models.SessionReport[length];
                                for (int i = 0; i < p_sessions.Length; i++)
                                {
                                    p_sessions[i] = global::Omnius.Xeus.Service.Models.SessionReport.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.ShoutExchangerReport(p_connectedSessionCount, p_acceptedSessionCount, p_sessions);
            }
        }
    }
    public sealed partial class PublishedShoutStorageReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport>.Formatter;
        public static global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport>.Empty;

        static PublishedShoutStorageReport()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport>.Empty = new global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport(global::System.Array.Empty<global::Omnius.Xeus.Service.Models.PublishedShoutReport>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxPublishedShoutsCount = 2147483647;

        public PublishedShoutStorageReport(global::Omnius.Xeus.Service.Models.PublishedShoutReport[] publishedShouts)
        {
            if (publishedShouts is null) throw new global::System.ArgumentNullException("publishedShouts");
            if (publishedShouts.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("publishedShouts");
            foreach (var n in publishedShouts)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.PublishedShouts = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Service.Models.PublishedShoutReport>(publishedShouts);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in publishedShouts)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Service.Models.PublishedShoutReport> PublishedShouts { get; }

        public static global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport? left, global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport? left, global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.PublishedShouts, target.PublishedShouts)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.PublishedShouts.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.PublishedShouts.Count);
                    foreach (var n in value.PublishedShouts)
                    {
                        global::Omnius.Xeus.Service.Models.PublishedShoutReport.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Service.Models.PublishedShoutReport[] p_publishedShouts = global::System.Array.Empty<global::Omnius.Xeus.Service.Models.PublishedShoutReport>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_publishedShouts = new global::Omnius.Xeus.Service.Models.PublishedShoutReport[length];
                                for (int i = 0; i < p_publishedShouts.Length; i++)
                                {
                                    p_publishedShouts[i] = global::Omnius.Xeus.Service.Models.PublishedShoutReport.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.PublishedShoutStorageReport(p_publishedShouts);
            }
        }
    }
    public sealed partial class PublishedShoutReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedShoutReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.PublishedShoutReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedShoutReport>.Formatter;
        public static global::Omnius.Xeus.Service.Models.PublishedShoutReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedShoutReport>.Empty;

        static PublishedShoutReport()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedShoutReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.PublishedShoutReport>.Empty = new global::Omnius.Xeus.Service.Models.PublishedShoutReport(global::Omnius.Core.Cryptography.OmniSignature.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public PublishedShoutReport(global::Omnius.Core.Cryptography.OmniSignature signature, string registrant)
        {
            if (signature is null) throw new global::System.ArgumentNullException("signature");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.Signature = signature;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (signature != default) ___h.Add(signature.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Service.Models.PublishedShoutReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.PublishedShoutReport? left, global::Omnius.Xeus.Service.Models.PublishedShoutReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.PublishedShoutReport? left, global::Omnius.Xeus.Service.Models.PublishedShoutReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.PublishedShoutReport) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.PublishedShoutReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.PublishedShoutReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Signature != target.Signature) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.PublishedShoutReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.PublishedShoutReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.PublishedShoutReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.PublishedShoutReport(p_signature, p_registrant);
            }
        }
    }
    public sealed partial class SubscribedShoutStorageReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport>.Formatter;
        public static global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport>.Empty;

        static SubscribedShoutStorageReport()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport>.Empty = new global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport(global::System.Array.Empty<global::Omnius.Xeus.Service.Models.SubscribedShoutReport>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxSubscribedShoutsCount = 2147483647;

        public SubscribedShoutStorageReport(global::Omnius.Xeus.Service.Models.SubscribedShoutReport[] subscribedShouts)
        {
            if (subscribedShouts is null) throw new global::System.ArgumentNullException("subscribedShouts");
            if (subscribedShouts.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("subscribedShouts");
            foreach (var n in subscribedShouts)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.SubscribedShouts = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Service.Models.SubscribedShoutReport>(subscribedShouts);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in subscribedShouts)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Service.Models.SubscribedShoutReport> SubscribedShouts { get; }

        public static global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport? left, global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport? left, global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.SubscribedShouts, target.SubscribedShouts)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.SubscribedShouts.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.SubscribedShouts.Count);
                    foreach (var n in value.SubscribedShouts)
                    {
                        global::Omnius.Xeus.Service.Models.SubscribedShoutReport.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Service.Models.SubscribedShoutReport[] p_subscribedShouts = global::System.Array.Empty<global::Omnius.Xeus.Service.Models.SubscribedShoutReport>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_subscribedShouts = new global::Omnius.Xeus.Service.Models.SubscribedShoutReport[length];
                                for (int i = 0; i < p_subscribedShouts.Length; i++)
                                {
                                    p_subscribedShouts[i] = global::Omnius.Xeus.Service.Models.SubscribedShoutReport.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.SubscribedShoutStorageReport(p_subscribedShouts);
            }
        }
    }
    public sealed partial class SubscribedShoutReport : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedShoutReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.SubscribedShoutReport> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedShoutReport>.Formatter;
        public static global::Omnius.Xeus.Service.Models.SubscribedShoutReport Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedShoutReport>.Empty;

        static SubscribedShoutReport()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedShoutReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Service.Models.SubscribedShoutReport>.Empty = new global::Omnius.Xeus.Service.Models.SubscribedShoutReport(global::Omnius.Core.Cryptography.OmniSignature.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public SubscribedShoutReport(global::Omnius.Core.Cryptography.OmniSignature signature, string registrant)
        {
            if (signature is null) throw new global::System.ArgumentNullException("signature");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.Signature = signature;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (signature != default) ___h.Add(signature.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Service.Models.SubscribedShoutReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Service.Models.SubscribedShoutReport? left, global::Omnius.Xeus.Service.Models.SubscribedShoutReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Service.Models.SubscribedShoutReport? left, global::Omnius.Xeus.Service.Models.SubscribedShoutReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Service.Models.SubscribedShoutReport) return false;
            return this.Equals((global::Omnius.Xeus.Service.Models.SubscribedShoutReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Service.Models.SubscribedShoutReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Signature != target.Signature) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Service.Models.SubscribedShoutReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Service.Models.SubscribedShoutReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Service.Models.SubscribedShoutReport Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Service.Models.SubscribedShoutReport(p_signature, p_registrant);
            }
        }
    }
}
