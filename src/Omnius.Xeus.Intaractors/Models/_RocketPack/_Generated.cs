// <auto-generated/>
#nullable enable

namespace Omnius.Xeus.Intaractors.Models
{
    public enum UploadingFileState : byte
    {
        Unknown = 0,
        Waiting = 1,
        Encoding = 2,
        Completed = 3,
    }
    public enum DownloadingFileState : byte
    {
        Unknown = 0,
        Downloading = 1,
        Decoding = 2,
        Completed = 3,
    }
    public sealed partial class Seed : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Seed>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Intaractors.Models.Seed> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Seed>.Formatter;
        public static global::Omnius.Xeus.Intaractors.Models.Seed Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Seed>.Empty;

        static Seed()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Seed>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Seed>.Empty = new global::Omnius.Xeus.Intaractors.Models.Seed(global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty, 0, global::Omnius.Core.RocketPack.Timestamp.Zero);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxNameLength = 256;

        public Seed(global::Omnius.Core.Cryptography.OmniHash rootHash, string name, ulong size, global::Omnius.Core.RocketPack.Timestamp creationTime)
        {
            if (name is null) throw new global::System.ArgumentNullException("name");
            if (name.Length > 256) throw new global::System.ArgumentOutOfRangeException("name");
            this.RootHash = rootHash;
            this.Name = name;
            this.Size = size;
            this.CreationTime = creationTime;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                if (name != default) ___h.Add(name.GetHashCode());
                if (size != default) ___h.Add(size.GetHashCode());
                if (creationTime != default) ___h.Add(creationTime.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
        public string Name { get; }
        public ulong Size { get; }
        public global::Omnius.Core.RocketPack.Timestamp CreationTime { get; }

        public static global::Omnius.Xeus.Intaractors.Models.Seed Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Intaractors.Models.Seed? left, global::Omnius.Xeus.Intaractors.Models.Seed? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Intaractors.Models.Seed? left, global::Omnius.Xeus.Intaractors.Models.Seed? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Intaractors.Models.Seed) return false;
            return this.Equals((global::Omnius.Xeus.Intaractors.Models.Seed)other);
        }
        public bool Equals(global::Omnius.Xeus.Intaractors.Models.Seed? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.RootHash != target.RootHash) return false;
            if (this.Name != target.Name) return false;
            if (this.Size != target.Size) return false;
            if (this.CreationTime != target.CreationTime) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Intaractors.Models.Seed>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Intaractors.Models.Seed value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                if (value.Name != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Name);
                }
                if (value.Size != 0)
                {
                    w.Write((uint)3);
                    w.Write(value.Size);
                }
                if (value.CreationTime != global::Omnius.Core.RocketPack.Timestamp.Zero)
                {
                    w.Write((uint)4);
                    w.Write(value.CreationTime);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Intaractors.Models.Seed Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
                string p_name = string.Empty;
                ulong p_size = 0;
                global::Omnius.Core.RocketPack.Timestamp p_creationTime = global::Omnius.Core.RocketPack.Timestamp.Zero;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_name = r.GetString(256);
                                break;
                            }
                        case 3:
                            {
                                p_size = r.GetUInt64();
                                break;
                            }
                        case 4:
                            {
                                p_creationTime = r.GetTimestamp();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Intaractors.Models.Seed(p_rootHash, p_name, p_size, p_creationTime);
            }
        }
    }
}
