// <auto-generated/>
#nullable enable

namespace Omnius.Xeus.Intaractors.Models
{
    public sealed partial class UserProfile : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfile>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Intaractors.Models.UserProfile> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfile>.Formatter;
        public static global::Omnius.Xeus.Intaractors.Models.UserProfile Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfile>.Empty;

        static UserProfile()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfile>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfile>.Empty = new global::Omnius.Xeus.Intaractors.Models.UserProfile(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Timestamp.Zero, global::Omnius.Xeus.Intaractors.Models.UserProfileContent.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public UserProfile(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Timestamp creationTime, global::Omnius.Xeus.Intaractors.Models.UserProfileContent content)
        {
            if (signature is null) throw new global::System.ArgumentNullException("signature");
            if (content is null) throw new global::System.ArgumentNullException("content");

            this.Signature = signature;
            this.CreationTime = creationTime;
            this.Content = content;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (signature != default) ___h.Add(signature.GetHashCode());
                if (creationTime != default) ___h.Add(creationTime.GetHashCode());
                if (content != default) ___h.Add(content.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
        public global::Omnius.Core.RocketPack.Timestamp CreationTime { get; }
        public global::Omnius.Xeus.Intaractors.Models.UserProfileContent Content { get; }

        public static global::Omnius.Xeus.Intaractors.Models.UserProfile Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Intaractors.Models.UserProfile? left, global::Omnius.Xeus.Intaractors.Models.UserProfile? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Intaractors.Models.UserProfile? left, global::Omnius.Xeus.Intaractors.Models.UserProfile? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Intaractors.Models.UserProfile) return false;
            return this.Equals((global::Omnius.Xeus.Intaractors.Models.UserProfile)other);
        }
        public bool Equals(global::Omnius.Xeus.Intaractors.Models.UserProfile? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Signature != target.Signature) return false;
            if (this.CreationTime != target.CreationTime) return false;
            if (this.Content != target.Content) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Intaractors.Models.UserProfile>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Intaractors.Models.UserProfile value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
                }
                if (value.CreationTime != global::Omnius.Core.RocketPack.Timestamp.Zero)
                {
                    w.Write((uint)2);
                    w.Write(value.CreationTime);
                }
                if (value.Content != global::Omnius.Xeus.Intaractors.Models.UserProfileContent.Empty)
                {
                    w.Write((uint)3);
                    global::Omnius.Xeus.Intaractors.Models.UserProfileContent.Formatter.Serialize(ref w, value.Content, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Intaractors.Models.UserProfile Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
                global::Omnius.Core.RocketPack.Timestamp p_creationTime = global::Omnius.Core.RocketPack.Timestamp.Zero;
                global::Omnius.Xeus.Intaractors.Models.UserProfileContent p_content = global::Omnius.Xeus.Intaractors.Models.UserProfileContent.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_creationTime = r.GetTimestamp();
                                break;
                            }
                        case 3:
                            {
                                p_content = global::Omnius.Xeus.Intaractors.Models.UserProfileContent.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Intaractors.Models.UserProfile(p_signature, p_creationTime, p_content);
            }
        }
    }
    public sealed partial class UserProfileContent : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfileContent>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Intaractors.Models.UserProfileContent> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfileContent>.Formatter;
        public static global::Omnius.Xeus.Intaractors.Models.UserProfileContent Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfileContent>.Empty;

        static UserProfileContent()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfileContent>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfileContent>.Empty = new global::Omnius.Xeus.Intaractors.Models.UserProfileContent(global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>(), global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>(), global::System.Array.Empty<global::Omnius.Xeus.Intaractors.Models.Box>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxTrustedSignaturesCount = 32768;
        public static readonly int MaxBlockedSignaturesCount = 32768;
        public static readonly int MaxBoxesCount = 33554432;

        public UserProfileContent(global::Omnius.Core.Cryptography.OmniSignature[] trustedSignatures, global::Omnius.Core.Cryptography.OmniSignature[] blockedSignatures, global::Omnius.Xeus.Intaractors.Models.Box[] boxes)
        {
            if (trustedSignatures is null) throw new global::System.ArgumentNullException("trustedSignatures");
            if (trustedSignatures.Length > 32768) throw new global::System.ArgumentOutOfRangeException("trustedSignatures");
            foreach (var n in trustedSignatures)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }
            if (blockedSignatures is null) throw new global::System.ArgumentNullException("blockedSignatures");
            if (blockedSignatures.Length > 32768) throw new global::System.ArgumentOutOfRangeException("blockedSignatures");
            foreach (var n in blockedSignatures)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }
            if (boxes is null) throw new global::System.ArgumentNullException("boxes");
            if (boxes.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("boxes");
            foreach (var n in boxes)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.TrustedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(trustedSignatures);
            this.BlockedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(blockedSignatures);
            this.Boxes = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Intaractors.Models.Box>(boxes);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in trustedSignatures)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                foreach (var n in blockedSignatures)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                foreach (var n in boxes)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> TrustedSignatures { get; }
        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> BlockedSignatures { get; }
        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Intaractors.Models.Box> Boxes { get; }

        public static global::Omnius.Xeus.Intaractors.Models.UserProfileContent Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Intaractors.Models.UserProfileContent? left, global::Omnius.Xeus.Intaractors.Models.UserProfileContent? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Intaractors.Models.UserProfileContent? left, global::Omnius.Xeus.Intaractors.Models.UserProfileContent? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Intaractors.Models.UserProfileContent) return false;
            return this.Equals((global::Omnius.Xeus.Intaractors.Models.UserProfileContent)other);
        }
        public bool Equals(global::Omnius.Xeus.Intaractors.Models.UserProfileContent? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.TrustedSignatures, target.TrustedSignatures)) return false;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.BlockedSignatures, target.BlockedSignatures)) return false;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Boxes, target.Boxes)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Intaractors.Models.UserProfileContent>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Intaractors.Models.UserProfileContent value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.TrustedSignatures.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.TrustedSignatures.Count);
                    foreach (var n in value.TrustedSignatures)
                    {
                        global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                if (value.BlockedSignatures.Count != 0)
                {
                    w.Write((uint)2);
                    w.Write((uint)value.BlockedSignatures.Count);
                    foreach (var n in value.BlockedSignatures)
                    {
                        global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                if (value.Boxes.Count != 0)
                {
                    w.Write((uint)3);
                    w.Write((uint)value.Boxes.Count);
                    foreach (var n in value.Boxes)
                    {
                        global::Omnius.Xeus.Intaractors.Models.Box.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Intaractors.Models.UserProfileContent Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature[] p_trustedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();
                global::Omnius.Core.Cryptography.OmniSignature[] p_blockedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();
                global::Omnius.Xeus.Intaractors.Models.Box[] p_boxes = global::System.Array.Empty<global::Omnius.Xeus.Intaractors.Models.Box>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_trustedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                                for (int i = 0; i < p_trustedSignatures.Length; i++)
                                {
                                    p_trustedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                        case 2:
                            {
                                var length = r.GetUInt32();
                                p_blockedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                                for (int i = 0; i < p_blockedSignatures.Length; i++)
                                {
                                    p_blockedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                        case 3:
                            {
                                var length = r.GetUInt32();
                                p_boxes = new global::Omnius.Xeus.Intaractors.Models.Box[length];
                                for (int i = 0; i < p_boxes.Length; i++)
                                {
                                    p_boxes[i] = global::Omnius.Xeus.Intaractors.Models.Box.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Intaractors.Models.UserProfileContent(p_trustedSignatures, p_blockedSignatures, p_boxes);
            }
        }
    }
    public sealed partial class Box : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Box>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Intaractors.Models.Box> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Box>.Formatter;
        public static global::Omnius.Xeus.Intaractors.Models.Box Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Box>.Empty;

        static Box()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Box>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Box>.Empty = new global::Omnius.Xeus.Intaractors.Models.Box(null, global::System.Array.Empty<string>(), global::System.Array.Empty<global::Omnius.Xeus.Intaractors.Models.Seed>(), global::System.Array.Empty<global::Omnius.Xeus.Intaractors.Models.Box>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxNameLength = 256;
        public static readonly int MaxTagsCount = 8;
        public static readonly int MaxSeedsCount = 33554432;
        public static readonly int MaxBoxesCount = 33554432;

        public Box(string? name, string[] tags, global::Omnius.Xeus.Intaractors.Models.Seed[] seeds, global::Omnius.Xeus.Intaractors.Models.Box[] boxes)
        {
            if (name is not null && name.Length > 256) throw new global::System.ArgumentOutOfRangeException("name");
            if (tags is null) throw new global::System.ArgumentNullException("tags");
            if (tags.Length > 8) throw new global::System.ArgumentOutOfRangeException("tags");
            foreach (var n in tags)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
                if (n.Length > 256) throw new global::System.ArgumentOutOfRangeException("n");
            }
            if (seeds is null) throw new global::System.ArgumentNullException("seeds");
            if (seeds.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("seeds");
            foreach (var n in seeds)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }
            if (boxes is null) throw new global::System.ArgumentNullException("boxes");
            if (boxes.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("boxes");
            foreach (var n in boxes)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.Name = name;
            this.Tags = new global::Omnius.Core.Collections.ReadOnlyListSlim<string>(tags);
            this.Seeds = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Intaractors.Models.Seed>(seeds);
            this.Boxes = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Intaractors.Models.Box>(boxes);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (name != default) ___h.Add(name.GetHashCode());
                foreach (var n in tags)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                foreach (var n in seeds)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                foreach (var n in boxes)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public string? Name { get; }
        public global::Omnius.Core.Collections.ReadOnlyListSlim<string> Tags { get; }
        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Intaractors.Models.Seed> Seeds { get; }
        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Intaractors.Models.Box> Boxes { get; }

        public static global::Omnius.Xeus.Intaractors.Models.Box Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Intaractors.Models.Box? left, global::Omnius.Xeus.Intaractors.Models.Box? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Intaractors.Models.Box? left, global::Omnius.Xeus.Intaractors.Models.Box? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Intaractors.Models.Box) return false;
            return this.Equals((global::Omnius.Xeus.Intaractors.Models.Box)other);
        }
        public bool Equals(global::Omnius.Xeus.Intaractors.Models.Box? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Name != target.Name) return false;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Tags, target.Tags)) return false;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Seeds, target.Seeds)) return false;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Boxes, target.Boxes)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Intaractors.Models.Box>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Intaractors.Models.Box value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Name != null)
                {
                    w.Write((uint)1);
                    w.Write(value.Name);
                }
                if (value.Tags.Count != 0)
                {
                    w.Write((uint)2);
                    w.Write((uint)value.Tags.Count);
                    foreach (var n in value.Tags)
                    {
                        w.Write(n);
                    }
                }
                if (value.Seeds.Count != 0)
                {
                    w.Write((uint)3);
                    w.Write((uint)value.Seeds.Count);
                    foreach (var n in value.Seeds)
                    {
                        global::Omnius.Xeus.Intaractors.Models.Seed.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                if (value.Boxes.Count != 0)
                {
                    w.Write((uint)4);
                    w.Write((uint)value.Boxes.Count);
                    foreach (var n in value.Boxes)
                    {
                        global::Omnius.Xeus.Intaractors.Models.Box.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Intaractors.Models.Box Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string? p_name = null;
                string[] p_tags = global::System.Array.Empty<string>();
                global::Omnius.Xeus.Intaractors.Models.Seed[] p_seeds = global::System.Array.Empty<global::Omnius.Xeus.Intaractors.Models.Seed>();
                global::Omnius.Xeus.Intaractors.Models.Box[] p_boxes = global::System.Array.Empty<global::Omnius.Xeus.Intaractors.Models.Box>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_name = r.GetString(256);
                                break;
                            }
                        case 2:
                            {
                                var length = r.GetUInt32();
                                p_tags = new string[length];
                                for (int i = 0; i < p_tags.Length; i++)
                                {
                                    p_tags[i] = r.GetString(256);
                                }
                                break;
                            }
                        case 3:
                            {
                                var length = r.GetUInt32();
                                p_seeds = new global::Omnius.Xeus.Intaractors.Models.Seed[length];
                                for (int i = 0; i < p_seeds.Length; i++)
                                {
                                    p_seeds[i] = global::Omnius.Xeus.Intaractors.Models.Seed.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                        case 4:
                            {
                                var length = r.GetUInt32();
                                p_boxes = new global::Omnius.Xeus.Intaractors.Models.Box[length];
                                for (int i = 0; i < p_boxes.Length; i++)
                                {
                                    p_boxes[i] = global::Omnius.Xeus.Intaractors.Models.Box.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Intaractors.Models.Box(p_name, p_tags, p_seeds, p_boxes);
            }
        }
    }
    public sealed partial class Seed : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Seed>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Intaractors.Models.Seed> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Seed>.Formatter;
        public static global::Omnius.Xeus.Intaractors.Models.Seed Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Seed>.Empty;

        static Seed()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Seed>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.Seed>.Empty = new global::Omnius.Xeus.Intaractors.Models.Seed(global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty, 0);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxNameLength = 256;

        public Seed(global::Omnius.Core.Cryptography.OmniHash rootHash, string name, ulong size)
        {
            if (name is null) throw new global::System.ArgumentNullException("name");
            if (name.Length > 256) throw new global::System.ArgumentOutOfRangeException("name");
            this.RootHash = rootHash;
            this.Name = name;
            this.Size = size;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                if (name != default) ___h.Add(name.GetHashCode());
                if (size != default) ___h.Add(size.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
        public string Name { get; }
        public ulong Size { get; }

        public static global::Omnius.Xeus.Intaractors.Models.Seed Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Intaractors.Models.Seed? left, global::Omnius.Xeus.Intaractors.Models.Seed? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Intaractors.Models.Seed? left, global::Omnius.Xeus.Intaractors.Models.Seed? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Intaractors.Models.Seed) return false;
            return this.Equals((global::Omnius.Xeus.Intaractors.Models.Seed)other);
        }
        public bool Equals(global::Omnius.Xeus.Intaractors.Models.Seed? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.RootHash != target.RootHash) return false;
            if (this.Name != target.Name) return false;
            if (this.Size != target.Size) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Intaractors.Models.Seed>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Intaractors.Models.Seed value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                if (value.Name != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Name);
                }
                if (value.Size != 0)
                {
                    w.Write((uint)3);
                    w.Write(value.Size);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Intaractors.Models.Seed Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
                string p_name = string.Empty;
                ulong p_size = 0;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_name = r.GetString(256);
                                break;
                            }
                        case 3:
                            {
                                p_size = r.GetUInt64();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Intaractors.Models.Seed(p_rootHash, p_name, p_size);
            }
        }
    }
    public sealed partial class UserProfileFinderSearchOptions : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions>
    {
        public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions>.Formatter;
        public static global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions>.Empty;

        static UserProfileFinderSearchOptions()
        {
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions>.Empty = new global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions(global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>(), global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>(), 0, 0);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxTrustedSignaturesCount = 32768;
        public static readonly int MaxBlockedSignaturesCount = 32768;

        public UserProfileFinderSearchOptions(global::Omnius.Core.Cryptography.OmniSignature[] trustedSignatures, global::Omnius.Core.Cryptography.OmniSignature[] blockedSignatures, uint searchDepth, uint maxUserProfileCount)
        {
            if (trustedSignatures is null) throw new global::System.ArgumentNullException("trustedSignatures");
            if (trustedSignatures.Length > 32768) throw new global::System.ArgumentOutOfRangeException("trustedSignatures");
            foreach (var n in trustedSignatures)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }
            if (blockedSignatures is null) throw new global::System.ArgumentNullException("blockedSignatures");
            if (blockedSignatures.Length > 32768) throw new global::System.ArgumentOutOfRangeException("blockedSignatures");
            foreach (var n in blockedSignatures)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }
            this.TrustedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(trustedSignatures);
            this.BlockedSignatures = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature>(blockedSignatures);
            this.SearchDepth = searchDepth;
            this.MaxUserProfileCount = maxUserProfileCount;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in trustedSignatures)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                foreach (var n in blockedSignatures)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                if (searchDepth != default) ___h.Add(searchDepth.GetHashCode());
                if (maxUserProfileCount != default) ___h.Add(maxUserProfileCount.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> TrustedSignatures { get; }
        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniSignature> BlockedSignatures { get; }
        public uint SearchDepth { get; }
        public uint MaxUserProfileCount { get; }

        public static global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions? left, global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions? left, global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions) return false;
            return this.Equals((global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions)other);
        }
        public bool Equals(global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.TrustedSignatures, target.TrustedSignatures)) return false;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.BlockedSignatures, target.BlockedSignatures)) return false;
            if (this.SearchDepth != target.SearchDepth) return false;
            if (this.MaxUserProfileCount != target.MaxUserProfileCount) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, in global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.TrustedSignatures.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.TrustedSignatures.Count);
                    foreach (var n in value.TrustedSignatures)
                    {
                        global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                if (value.BlockedSignatures.Count != 0)
                {
                    w.Write((uint)2);
                    w.Write((uint)value.BlockedSignatures.Count);
                    foreach (var n in value.BlockedSignatures)
                    {
                        global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                if (value.SearchDepth != 0)
                {
                    w.Write((uint)3);
                    w.Write(value.SearchDepth);
                }
                if (value.MaxUserProfileCount != 0)
                {
                    w.Write((uint)4);
                    w.Write(value.MaxUserProfileCount);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature[] p_trustedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();
                global::Omnius.Core.Cryptography.OmniSignature[] p_blockedSignatures = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniSignature>();
                uint p_searchDepth = 0;
                uint p_maxUserProfileCount = 0;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_trustedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                                for (int i = 0; i < p_trustedSignatures.Length; i++)
                                {
                                    p_trustedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                        case 2:
                            {
                                var length = r.GetUInt32();
                                p_blockedSignatures = new global::Omnius.Core.Cryptography.OmniSignature[length];
                                for (int i = 0; i < p_blockedSignatures.Length; i++)
                                {
                                    p_blockedSignatures[i] = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                        case 3:
                            {
                                p_searchDepth = r.GetUInt32();
                                break;
                            }
                        case 4:
                            {
                                p_maxUserProfileCount = r.GetUInt32();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Intaractors.Models.UserProfileFinderSearchOptions(p_trustedSignatures, p_blockedSignatures, p_searchDepth, p_maxUserProfileCount);
            }
        }
    }
}
