// <auto-generated/>
#nullable enable

namespace Omnius.Xeus.Engines.Models
{
    public enum ConnectionType : byte
    {
        Unknown = 0,
        Connected = 1,
        Accepted = 2,
    }
    public enum TcpProxyType : byte
    {
        Unknown = 0,
        HttpProxy = 1,
        Socks5Proxy = 2,
    }
    public sealed partial class NodeProfile : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.NodeProfile>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.NodeProfile> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.NodeProfile>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.NodeProfile Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.NodeProfile>.Empty;

        static NodeProfile()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.NodeProfile>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.NodeProfile>.Empty = new global::Omnius.Xeus.Engines.Models.NodeProfile(global::System.Array.Empty<global::Omnius.Core.Network.OmniAddress>(), global::System.Array.Empty<string>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxAddressesCount = 32;
        public static readonly int MaxEngineNamesCount = 32;

        public NodeProfile(global::Omnius.Core.Network.OmniAddress[] addresses, string[] engineNames)
        {
            if (addresses is null) throw new global::System.ArgumentNullException("addresses");
            if (addresses.Length > 32) throw new global::System.ArgumentOutOfRangeException("addresses");
            foreach (var n in addresses)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }
            if (engineNames is null) throw new global::System.ArgumentNullException("engineNames");
            if (engineNames.Length > 32) throw new global::System.ArgumentOutOfRangeException("engineNames");
            foreach (var n in engineNames)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
                if (n.Length > 256) throw new global::System.ArgumentOutOfRangeException("n");
            }

            this.Addresses = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Network.OmniAddress>(addresses);
            this.EngineNames = new global::Omnius.Core.Collections.ReadOnlyListSlim<string>(engineNames);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in addresses)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                foreach (var n in engineNames)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Network.OmniAddress> Addresses { get; }
        public global::Omnius.Core.Collections.ReadOnlyListSlim<string> EngineNames { get; }

        public static global::Omnius.Xeus.Engines.Models.NodeProfile Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.NodeProfile? left, global::Omnius.Xeus.Engines.Models.NodeProfile? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.NodeProfile? left, global::Omnius.Xeus.Engines.Models.NodeProfile? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.NodeProfile) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.NodeProfile)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.NodeProfile? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Addresses, target.Addresses)) return false;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.EngineNames, target.EngineNames)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.NodeProfile>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.NodeProfile value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Addresses.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.Addresses.Count);
                    foreach (var n in value.Addresses)
                    {
                        global::Omnius.Core.Network.OmniAddress.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                if (value.EngineNames.Count != 0)
                {
                    w.Write((uint)2);
                    w.Write((uint)value.EngineNames.Count);
                    foreach (var n in value.EngineNames)
                    {
                        w.Write(n);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.NodeProfile Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Network.OmniAddress[] p_addresses = global::System.Array.Empty<global::Omnius.Core.Network.OmniAddress>();
                string[] p_engineNames = global::System.Array.Empty<string>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_addresses = new global::Omnius.Core.Network.OmniAddress[length];
                                for (int i = 0; i < p_addresses.Length; i++)
                                {
                                    p_addresses[i] = global::Omnius.Core.Network.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                        case 2:
                            {
                                var length = r.GetUInt32();
                                p_engineNames = new string[length];
                                for (int i = 0; i < p_engineNames.Length; i++)
                                {
                                    p_engineNames[i] = r.GetString(256);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.NodeProfile(p_addresses, p_engineNames);
            }
        }
    }
    public sealed partial class ResourceTag : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ResourceTag>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ResourceTag> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ResourceTag>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.ResourceTag Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ResourceTag>.Empty;

        static ResourceTag()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ResourceTag>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ResourceTag>.Empty = new global::Omnius.Xeus.Engines.Models.ResourceTag(global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxEngineNameLength = 256;

        public ResourceTag(global::Omnius.Core.Cryptography.OmniHash hash, string engineName)
        {
            if (engineName is null) throw new global::System.ArgumentNullException("engineName");
            if (engineName.Length > 256) throw new global::System.ArgumentOutOfRangeException("engineName");

            this.Hash = hash;
            this.EngineName = engineName;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (hash != default) ___h.Add(hash.GetHashCode());
                if (engineName != default) ___h.Add(engineName.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash Hash { get; }
        public string EngineName { get; }

        public static global::Omnius.Xeus.Engines.Models.ResourceTag Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.ResourceTag? left, global::Omnius.Xeus.Engines.Models.ResourceTag? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.ResourceTag? left, global::Omnius.Xeus.Engines.Models.ResourceTag? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.ResourceTag) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.ResourceTag)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.ResourceTag? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Hash != target.Hash) return false;
            if (this.EngineName != target.EngineName) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ResourceTag>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.ResourceTag value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Hash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.Hash, rank + 1);
                }
                if (value.EngineName != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.EngineName);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.ResourceTag Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_hash = global::Omnius.Core.Cryptography.OmniHash.Empty;
                string p_engineName = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_hash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_engineName = r.GetString(256);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.ResourceTag(p_hash, p_engineName);
            }
        }
    }
    public sealed partial class DeclaredMessage : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessage>, global::System.IDisposable
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessage> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessage>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.DeclaredMessage Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessage>.Empty;

        static DeclaredMessage()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessage>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessage>.Empty = new global::Omnius.Xeus.Engines.Models.DeclaredMessage(global::Omnius.Core.RocketPack.Timestamp.Zero, global::Omnius.Core.MemoryOwner<byte>.Empty, null);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxValueLength = 33554432;

        public DeclaredMessage(global::Omnius.Core.RocketPack.Timestamp creationTime, global::System.Buffers.IMemoryOwner<byte> value, global::Omnius.Core.Cryptography.OmniCertificate? certificate)
        {
            if (value is null) throw new global::System.ArgumentNullException("value");
            if (value.Memory.Length > 33554432) throw new global::System.ArgumentOutOfRangeException("value");
            this.CreationTime = creationTime;
            _value = value;
            this.Certificate = certificate;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (creationTime != default) ___h.Add(creationTime.GetHashCode());
                if (!value.Memory.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(value.Memory.Span));
                if (certificate != default) ___h.Add(certificate.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.RocketPack.Timestamp CreationTime { get; }
        private readonly global::System.Buffers.IMemoryOwner<byte> _value;
        public global::System.ReadOnlyMemory<byte> Value => _value.Memory;
        public global::Omnius.Core.Cryptography.OmniCertificate? Certificate { get; }

        public static global::Omnius.Xeus.Engines.Models.DeclaredMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.DeclaredMessage? left, global::Omnius.Xeus.Engines.Models.DeclaredMessage? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.DeclaredMessage? left, global::Omnius.Xeus.Engines.Models.DeclaredMessage? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.DeclaredMessage) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.DeclaredMessage)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.DeclaredMessage? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.CreationTime != target.CreationTime) return false;
            if (!global::Omnius.Core.BytesOperations.Equals(this.Value.Span, target.Value.Span)) return false;
            if ((this.Certificate is null) != (target.Certificate is null)) return false;
            if ((this.Certificate is not null) && (target.Certificate is not null) && this.Certificate != target.Certificate) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        public void Dispose()
        {
            _value?.Dispose();
        }

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessage>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.DeclaredMessage value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.CreationTime != global::Omnius.Core.RocketPack.Timestamp.Zero)
                {
                    w.Write((uint)1);
                    w.Write(value.CreationTime);
                }
                if (!value.Value.IsEmpty)
                {
                    w.Write((uint)2);
                    w.Write(value.Value.Span);
                }
                if (value.Certificate != null)
                {
                    w.Write((uint)3);
                    global::Omnius.Core.Cryptography.OmniCertificate.Formatter.Serialize(ref w, value.Certificate, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.DeclaredMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.RocketPack.Timestamp p_creationTime = global::Omnius.Core.RocketPack.Timestamp.Zero;
                global::System.Buffers.IMemoryOwner<byte> p_value = global::Omnius.Core.MemoryOwner<byte>.Empty;
                global::Omnius.Core.Cryptography.OmniCertificate? p_certificate = null;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_creationTime = r.GetTimestamp();
                                break;
                            }
                        case 2:
                            {
                                p_value = r.GetRecyclableMemory(33554432);
                                break;
                            }
                        case 3:
                            {
                                p_certificate = global::Omnius.Core.Cryptography.OmniCertificate.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.DeclaredMessage(p_creationTime, p_value, p_certificate);
            }
        }
    }
    public sealed partial class ConsistencyReport : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ConsistencyReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ConsistencyReport> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ConsistencyReport>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.ConsistencyReport Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ConsistencyReport>.Empty;

        static ConsistencyReport()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ConsistencyReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ConsistencyReport>.Empty = new global::Omnius.Xeus.Engines.Models.ConsistencyReport(0, 0, 0);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public ConsistencyReport(uint badBlockCount, uint checkedBlockCount, uint totalBlockCount)
        {
            this.BadBlockCount = badBlockCount;
            this.CheckedBlockCount = checkedBlockCount;
            this.TotalBlockCount = totalBlockCount;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (badBlockCount != default) ___h.Add(badBlockCount.GetHashCode());
                if (checkedBlockCount != default) ___h.Add(checkedBlockCount.GetHashCode());
                if (totalBlockCount != default) ___h.Add(totalBlockCount.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public uint BadBlockCount { get; }
        public uint CheckedBlockCount { get; }
        public uint TotalBlockCount { get; }

        public static global::Omnius.Xeus.Engines.Models.ConsistencyReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.ConsistencyReport? left, global::Omnius.Xeus.Engines.Models.ConsistencyReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.ConsistencyReport? left, global::Omnius.Xeus.Engines.Models.ConsistencyReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.ConsistencyReport) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.ConsistencyReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.ConsistencyReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.BadBlockCount != target.BadBlockCount) return false;
            if (this.CheckedBlockCount != target.CheckedBlockCount) return false;
            if (this.TotalBlockCount != target.TotalBlockCount) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ConsistencyReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.ConsistencyReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.BadBlockCount != 0)
                {
                    w.Write((uint)1);
                    w.Write(value.BadBlockCount);
                }
                if (value.CheckedBlockCount != 0)
                {
                    w.Write((uint)2);
                    w.Write(value.CheckedBlockCount);
                }
                if (value.TotalBlockCount != 0)
                {
                    w.Write((uint)3);
                    w.Write(value.TotalBlockCount);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.ConsistencyReport Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                uint p_badBlockCount = 0;
                uint p_checkedBlockCount = 0;
                uint p_totalBlockCount = 0;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_badBlockCount = r.GetUInt32();
                                break;
                            }
                        case 2:
                            {
                                p_checkedBlockCount = r.GetUInt32();
                                break;
                            }
                        case 3:
                            {
                                p_totalBlockCount = r.GetUInt32();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.ConsistencyReport(p_badBlockCount, p_checkedBlockCount, p_totalBlockCount);
            }
        }
    }
    public sealed partial class ConnectionReport : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ConnectionReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ConnectionReport> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ConnectionReport>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.ConnectionReport Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ConnectionReport>.Empty;

        static ConnectionReport()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ConnectionReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ConnectionReport>.Empty = new global::Omnius.Xeus.Engines.Models.ConnectionReport((global::Omnius.Xeus.Engines.Models.ConnectionType)0, global::Omnius.Core.Network.OmniAddress.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public ConnectionReport(global::Omnius.Xeus.Engines.Models.ConnectionType type, global::Omnius.Core.Network.OmniAddress endPoint)
        {
            if (endPoint is null) throw new global::System.ArgumentNullException("endPoint");

            this.Type = type;
            this.EndPoint = endPoint;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (type != default) ___h.Add(type.GetHashCode());
                if (endPoint != default) ___h.Add(endPoint.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Xeus.Engines.Models.ConnectionType Type { get; }
        public global::Omnius.Core.Network.OmniAddress EndPoint { get; }

        public static global::Omnius.Xeus.Engines.Models.ConnectionReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.ConnectionReport? left, global::Omnius.Xeus.Engines.Models.ConnectionReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.ConnectionReport? left, global::Omnius.Xeus.Engines.Models.ConnectionReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.ConnectionReport) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.ConnectionReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.ConnectionReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Type != target.Type) return false;
            if (this.EndPoint != target.EndPoint) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ConnectionReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.ConnectionReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Type != (global::Omnius.Xeus.Engines.Models.ConnectionType)0)
                {
                    w.Write((uint)1);
                    w.Write((ulong)value.Type);
                }
                if (value.EndPoint != global::Omnius.Core.Network.OmniAddress.Empty)
                {
                    w.Write((uint)2);
                    global::Omnius.Core.Network.OmniAddress.Formatter.Serialize(ref w, value.EndPoint, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.ConnectionReport Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Models.ConnectionType p_type = (global::Omnius.Xeus.Engines.Models.ConnectionType)0;
                global::Omnius.Core.Network.OmniAddress p_endPoint = global::Omnius.Core.Network.OmniAddress.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_type = (global::Omnius.Xeus.Engines.Models.ConnectionType)r.GetUInt64();
                                break;
                            }
                        case 2:
                            {
                                p_endPoint = global::Omnius.Core.Network.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.ConnectionReport(p_type, p_endPoint);
            }
        }
    }
    public sealed partial class TcpProxyOptions : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpProxyOptions>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.TcpProxyOptions> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpProxyOptions>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.TcpProxyOptions Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpProxyOptions>.Empty;

        static TcpProxyOptions()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpProxyOptions>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpProxyOptions>.Empty = new global::Omnius.Xeus.Engines.Models.TcpProxyOptions((global::Omnius.Xeus.Engines.Models.TcpProxyType)0, null);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public TcpProxyOptions(global::Omnius.Xeus.Engines.Models.TcpProxyType type, global::Omnius.Core.Network.OmniAddress? address)
        {
            this.Type = type;
            this.Address = address;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (type != default) ___h.Add(type.GetHashCode());
                if (address != default) ___h.Add(address.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Xeus.Engines.Models.TcpProxyType Type { get; }
        public global::Omnius.Core.Network.OmniAddress? Address { get; }

        public static global::Omnius.Xeus.Engines.Models.TcpProxyOptions Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.TcpProxyOptions? left, global::Omnius.Xeus.Engines.Models.TcpProxyOptions? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.TcpProxyOptions? left, global::Omnius.Xeus.Engines.Models.TcpProxyOptions? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.TcpProxyOptions) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.TcpProxyOptions)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.TcpProxyOptions? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Type != target.Type) return false;
            if ((this.Address is null) != (target.Address is null)) return false;
            if ((this.Address is not null) && (target.Address is not null) && this.Address != target.Address) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.TcpProxyOptions>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.TcpProxyOptions value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Type != (global::Omnius.Xeus.Engines.Models.TcpProxyType)0)
                {
                    w.Write((uint)1);
                    w.Write((ulong)value.Type);
                }
                if (value.Address != null)
                {
                    w.Write((uint)2);
                    global::Omnius.Core.Network.OmniAddress.Formatter.Serialize(ref w, value.Address, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.TcpProxyOptions Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Models.TcpProxyType p_type = (global::Omnius.Xeus.Engines.Models.TcpProxyType)0;
                global::Omnius.Core.Network.OmniAddress? p_address = null;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_type = (global::Omnius.Xeus.Engines.Models.TcpProxyType)r.GetUInt64();
                                break;
                            }
                        case 2:
                            {
                                p_address = global::Omnius.Core.Network.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.TcpProxyOptions(p_type, p_address);
            }
        }
    }
    public sealed partial class TcpConnectingOptions : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectingOptions>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.TcpConnectingOptions> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectingOptions>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.TcpConnectingOptions Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectingOptions>.Empty;

        static TcpConnectingOptions()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectingOptions>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectingOptions>.Empty = new global::Omnius.Xeus.Engines.Models.TcpConnectingOptions(false, null);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public TcpConnectingOptions(bool enabled, global::Omnius.Xeus.Engines.Models.TcpProxyOptions? proxyOptions)
        {
            this.Enabled = enabled;
            this.ProxyOptions = proxyOptions;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (enabled != default) ___h.Add(enabled.GetHashCode());
                if (proxyOptions != default) ___h.Add(proxyOptions.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public bool Enabled { get; }
        public global::Omnius.Xeus.Engines.Models.TcpProxyOptions? ProxyOptions { get; }

        public static global::Omnius.Xeus.Engines.Models.TcpConnectingOptions Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.TcpConnectingOptions? left, global::Omnius.Xeus.Engines.Models.TcpConnectingOptions? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.TcpConnectingOptions? left, global::Omnius.Xeus.Engines.Models.TcpConnectingOptions? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.TcpConnectingOptions) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.TcpConnectingOptions)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.TcpConnectingOptions? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Enabled != target.Enabled) return false;
            if ((this.ProxyOptions is null) != (target.ProxyOptions is null)) return false;
            if ((this.ProxyOptions is not null) && (target.ProxyOptions is not null) && this.ProxyOptions != target.ProxyOptions) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.TcpConnectingOptions>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.TcpConnectingOptions value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Enabled != false)
                {
                    w.Write((uint)1);
                    w.Write(value.Enabled);
                }
                if (value.ProxyOptions != null)
                {
                    w.Write((uint)2);
                    global::Omnius.Xeus.Engines.Models.TcpProxyOptions.Formatter.Serialize(ref w, value.ProxyOptions, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.TcpConnectingOptions Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                bool p_enabled = false;
                global::Omnius.Xeus.Engines.Models.TcpProxyOptions? p_proxyOptions = null;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_enabled = r.GetBoolean();
                                break;
                            }
                        case 2:
                            {
                                p_proxyOptions = global::Omnius.Xeus.Engines.Models.TcpProxyOptions.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.TcpConnectingOptions(p_enabled, p_proxyOptions);
            }
        }
    }
    public sealed partial class TcpAcceptingOptions : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions>.Empty;

        static TcpAcceptingOptions()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions>.Empty = new global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions(false, global::System.Array.Empty<global::Omnius.Core.Network.OmniAddress>(), false);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxListenAddressesCount = 32;

        public TcpAcceptingOptions(bool enabled, global::Omnius.Core.Network.OmniAddress[] listenAddresses, bool useUpnp)
        {
            if (listenAddresses is null) throw new global::System.ArgumentNullException("listenAddresses");
            if (listenAddresses.Length > 32) throw new global::System.ArgumentOutOfRangeException("listenAddresses");
            foreach (var n in listenAddresses)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }
            this.Enabled = enabled;
            this.ListenAddresses = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Network.OmniAddress>(listenAddresses);
            this.UseUpnp = useUpnp;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (enabled != default) ___h.Add(enabled.GetHashCode());
                foreach (var n in listenAddresses)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                if (useUpnp != default) ___h.Add(useUpnp.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public bool Enabled { get; }
        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Network.OmniAddress> ListenAddresses { get; }
        public bool UseUpnp { get; }

        public static global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions? left, global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions? left, global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Enabled != target.Enabled) return false;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.ListenAddresses, target.ListenAddresses)) return false;
            if (this.UseUpnp != target.UseUpnp) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Enabled != false)
                {
                    w.Write((uint)1);
                    w.Write(value.Enabled);
                }
                if (value.ListenAddresses.Count != 0)
                {
                    w.Write((uint)2);
                    w.Write((uint)value.ListenAddresses.Count);
                    foreach (var n in value.ListenAddresses)
                    {
                        global::Omnius.Core.Network.OmniAddress.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                if (value.UseUpnp != false)
                {
                    w.Write((uint)3);
                    w.Write(value.UseUpnp);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                bool p_enabled = false;
                global::Omnius.Core.Network.OmniAddress[] p_listenAddresses = global::System.Array.Empty<global::Omnius.Core.Network.OmniAddress>();
                bool p_useUpnp = false;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_enabled = r.GetBoolean();
                                break;
                            }
                        case 2:
                            {
                                var length = r.GetUInt32();
                                p_listenAddresses = new global::Omnius.Core.Network.OmniAddress[length];
                                for (int i = 0; i < p_listenAddresses.Length; i++)
                                {
                                    p_listenAddresses[i] = global::Omnius.Core.Network.OmniAddress.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                        case 3:
                            {
                                p_useUpnp = r.GetBoolean();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions(p_enabled, p_listenAddresses, p_useUpnp);
            }
        }
    }
    public sealed partial class BandwidthOptions : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.BandwidthOptions>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.BandwidthOptions> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.BandwidthOptions>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.BandwidthOptions Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.BandwidthOptions>.Empty;

        static BandwidthOptions()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.BandwidthOptions>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.BandwidthOptions>.Empty = new global::Omnius.Xeus.Engines.Models.BandwidthOptions(0, 0);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public BandwidthOptions(uint maxSendBytesPerSeconds, uint maxReceiveBytesPerSeconds)
        {
            this.MaxSendBytesPerSeconds = maxSendBytesPerSeconds;
            this.MaxReceiveBytesPerSeconds = maxReceiveBytesPerSeconds;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (maxSendBytesPerSeconds != default) ___h.Add(maxSendBytesPerSeconds.GetHashCode());
                if (maxReceiveBytesPerSeconds != default) ___h.Add(maxReceiveBytesPerSeconds.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public uint MaxSendBytesPerSeconds { get; }
        public uint MaxReceiveBytesPerSeconds { get; }

        public static global::Omnius.Xeus.Engines.Models.BandwidthOptions Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.BandwidthOptions? left, global::Omnius.Xeus.Engines.Models.BandwidthOptions? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.BandwidthOptions? left, global::Omnius.Xeus.Engines.Models.BandwidthOptions? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.BandwidthOptions) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.BandwidthOptions)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.BandwidthOptions? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.MaxSendBytesPerSeconds != target.MaxSendBytesPerSeconds) return false;
            if (this.MaxReceiveBytesPerSeconds != target.MaxReceiveBytesPerSeconds) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.BandwidthOptions>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.BandwidthOptions value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.MaxSendBytesPerSeconds != 0)
                {
                    w.Write((uint)1);
                    w.Write(value.MaxSendBytesPerSeconds);
                }
                if (value.MaxReceiveBytesPerSeconds != 0)
                {
                    w.Write((uint)2);
                    w.Write(value.MaxReceiveBytesPerSeconds);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.BandwidthOptions Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                uint p_maxSendBytesPerSeconds = 0;
                uint p_maxReceiveBytesPerSeconds = 0;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_maxSendBytesPerSeconds = r.GetUInt32();
                                break;
                            }
                        case 2:
                            {
                                p_maxReceiveBytesPerSeconds = r.GetUInt32();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.BandwidthOptions(p_maxSendBytesPerSeconds, p_maxReceiveBytesPerSeconds);
            }
        }
    }
    public sealed partial class TcpConnectorOptions : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectorOptions>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.TcpConnectorOptions> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectorOptions>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.TcpConnectorOptions Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectorOptions>.Empty;

        static TcpConnectorOptions()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectorOptions>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectorOptions>.Empty = new global::Omnius.Xeus.Engines.Models.TcpConnectorOptions(global::Omnius.Xeus.Engines.Models.TcpConnectingOptions.Empty, global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions.Empty, global::Omnius.Xeus.Engines.Models.BandwidthOptions.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public TcpConnectorOptions(global::Omnius.Xeus.Engines.Models.TcpConnectingOptions connectingOptions, global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions acceptingOptions, global::Omnius.Xeus.Engines.Models.BandwidthOptions bandwidthOptions)
        {
            if (connectingOptions is null) throw new global::System.ArgumentNullException("connectingOptions");
            if (acceptingOptions is null) throw new global::System.ArgumentNullException("acceptingOptions");
            if (bandwidthOptions is null) throw new global::System.ArgumentNullException("bandwidthOptions");

            this.ConnectingOptions = connectingOptions;
            this.AcceptingOptions = acceptingOptions;
            this.BandwidthOptions = bandwidthOptions;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (connectingOptions != default) ___h.Add(connectingOptions.GetHashCode());
                if (acceptingOptions != default) ___h.Add(acceptingOptions.GetHashCode());
                if (bandwidthOptions != default) ___h.Add(bandwidthOptions.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Xeus.Engines.Models.TcpConnectingOptions ConnectingOptions { get; }
        public global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions AcceptingOptions { get; }
        public global::Omnius.Xeus.Engines.Models.BandwidthOptions BandwidthOptions { get; }

        public static global::Omnius.Xeus.Engines.Models.TcpConnectorOptions Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.TcpConnectorOptions? left, global::Omnius.Xeus.Engines.Models.TcpConnectorOptions? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.TcpConnectorOptions? left, global::Omnius.Xeus.Engines.Models.TcpConnectorOptions? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.TcpConnectorOptions) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.TcpConnectorOptions)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.TcpConnectorOptions? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConnectingOptions != target.ConnectingOptions) return false;
            if (this.AcceptingOptions != target.AcceptingOptions) return false;
            if (this.BandwidthOptions != target.BandwidthOptions) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.TcpConnectorOptions>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.TcpConnectorOptions value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConnectingOptions != global::Omnius.Xeus.Engines.Models.TcpConnectingOptions.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Xeus.Engines.Models.TcpConnectingOptions.Formatter.Serialize(ref w, value.ConnectingOptions, rank + 1);
                }
                if (value.AcceptingOptions != global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions.Empty)
                {
                    w.Write((uint)2);
                    global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions.Formatter.Serialize(ref w, value.AcceptingOptions, rank + 1);
                }
                if (value.BandwidthOptions != global::Omnius.Xeus.Engines.Models.BandwidthOptions.Empty)
                {
                    w.Write((uint)3);
                    global::Omnius.Xeus.Engines.Models.BandwidthOptions.Formatter.Serialize(ref w, value.BandwidthOptions, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.TcpConnectorOptions Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Models.TcpConnectingOptions p_connectingOptions = global::Omnius.Xeus.Engines.Models.TcpConnectingOptions.Empty;
                global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions p_acceptingOptions = global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions.Empty;
                global::Omnius.Xeus.Engines.Models.BandwidthOptions p_bandwidthOptions = global::Omnius.Xeus.Engines.Models.BandwidthOptions.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_connectingOptions = global::Omnius.Xeus.Engines.Models.TcpConnectingOptions.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_acceptingOptions = global::Omnius.Xeus.Engines.Models.TcpAcceptingOptions.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 3:
                            {
                                p_bandwidthOptions = global::Omnius.Xeus.Engines.Models.BandwidthOptions.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.TcpConnectorOptions(p_connectingOptions, p_acceptingOptions, p_bandwidthOptions);
            }
        }
    }
    public sealed partial class TcpConnectorReport : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectorReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.TcpConnectorReport> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectorReport>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.TcpConnectorReport Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectorReport>.Empty;

        static TcpConnectorReport()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectorReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.TcpConnectorReport>.Empty = new global::Omnius.Xeus.Engines.Models.TcpConnectorReport(0, 0);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public TcpConnectorReport(uint connectedCount, uint acceptedCount)
        {
            this.ConnectedCount = connectedCount;
            this.AcceptedCount = acceptedCount;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (connectedCount != default) ___h.Add(connectedCount.GetHashCode());
                if (acceptedCount != default) ___h.Add(acceptedCount.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public uint ConnectedCount { get; }
        public uint AcceptedCount { get; }

        public static global::Omnius.Xeus.Engines.Models.TcpConnectorReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.TcpConnectorReport? left, global::Omnius.Xeus.Engines.Models.TcpConnectorReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.TcpConnectorReport? left, global::Omnius.Xeus.Engines.Models.TcpConnectorReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.TcpConnectorReport) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.TcpConnectorReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.TcpConnectorReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConnectedCount != target.ConnectedCount) return false;
            if (this.AcceptedCount != target.AcceptedCount) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.TcpConnectorReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.TcpConnectorReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConnectedCount != 0)
                {
                    w.Write((uint)1);
                    w.Write(value.ConnectedCount);
                }
                if (value.AcceptedCount != 0)
                {
                    w.Write((uint)2);
                    w.Write(value.AcceptedCount);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.TcpConnectorReport Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                uint p_connectedCount = 0;
                uint p_acceptedCount = 0;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_connectedCount = r.GetUInt32();
                                break;
                            }
                        case 2:
                            {
                                p_acceptedCount = r.GetUInt32();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.TcpConnectorReport(p_connectedCount, p_acceptedCount);
            }
        }
    }
    public sealed partial class CkadMediatorOptions : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.CkadMediatorOptions>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.CkadMediatorOptions> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.CkadMediatorOptions>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.CkadMediatorOptions Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.CkadMediatorOptions>.Empty;

        static CkadMediatorOptions()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.CkadMediatorOptions>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.CkadMediatorOptions>.Empty = new global::Omnius.Xeus.Engines.Models.CkadMediatorOptions(string.Empty, 0);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxConfigDirectoryPathLength = 1024;

        public CkadMediatorOptions(string configDirectoryPath, uint maxConnectionCount)
        {
            if (configDirectoryPath is null) throw new global::System.ArgumentNullException("configDirectoryPath");
            if (configDirectoryPath.Length > 1024) throw new global::System.ArgumentOutOfRangeException("configDirectoryPath");
            this.ConfigDirectoryPath = configDirectoryPath;
            this.MaxConnectionCount = maxConnectionCount;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (configDirectoryPath != default) ___h.Add(configDirectoryPath.GetHashCode());
                if (maxConnectionCount != default) ___h.Add(maxConnectionCount.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string ConfigDirectoryPath { get; }
        public uint MaxConnectionCount { get; }

        public static global::Omnius.Xeus.Engines.Models.CkadMediatorOptions Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.CkadMediatorOptions? left, global::Omnius.Xeus.Engines.Models.CkadMediatorOptions? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.CkadMediatorOptions? left, global::Omnius.Xeus.Engines.Models.CkadMediatorOptions? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.CkadMediatorOptions) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.CkadMediatorOptions)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.CkadMediatorOptions? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConfigDirectoryPath != target.ConfigDirectoryPath) return false;
            if (this.MaxConnectionCount != target.MaxConnectionCount) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.CkadMediatorOptions>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.CkadMediatorOptions value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConfigDirectoryPath != string.Empty)
                {
                    w.Write((uint)1);
                    w.Write(value.ConfigDirectoryPath);
                }
                if (value.MaxConnectionCount != 0)
                {
                    w.Write((uint)2);
                    w.Write(value.MaxConnectionCount);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.CkadMediatorOptions Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string p_configDirectoryPath = string.Empty;
                uint p_maxConnectionCount = 0;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_configDirectoryPath = r.GetString(1024);
                                break;
                            }
                        case 2:
                            {
                                p_maxConnectionCount = r.GetUInt32();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.CkadMediatorOptions(p_configDirectoryPath, p_maxConnectionCount);
            }
        }
    }
    public sealed partial class CkadMediatorReport : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.CkadMediatorReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.CkadMediatorReport> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.CkadMediatorReport>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.CkadMediatorReport Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.CkadMediatorReport>.Empty;

        static CkadMediatorReport()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.CkadMediatorReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.CkadMediatorReport>.Empty = new global::Omnius.Xeus.Engines.Models.CkadMediatorReport(0, 0);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public CkadMediatorReport(uint connectingConnectionCount, uint acceptingConnectionCount)
        {
            this.ConnectingConnectionCount = connectingConnectionCount;
            this.AcceptingConnectionCount = acceptingConnectionCount;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (connectingConnectionCount != default) ___h.Add(connectingConnectionCount.GetHashCode());
                if (acceptingConnectionCount != default) ___h.Add(acceptingConnectionCount.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public uint ConnectingConnectionCount { get; }
        public uint AcceptingConnectionCount { get; }

        public static global::Omnius.Xeus.Engines.Models.CkadMediatorReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.CkadMediatorReport? left, global::Omnius.Xeus.Engines.Models.CkadMediatorReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.CkadMediatorReport? left, global::Omnius.Xeus.Engines.Models.CkadMediatorReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.CkadMediatorReport) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.CkadMediatorReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.CkadMediatorReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConnectingConnectionCount != target.ConnectingConnectionCount) return false;
            if (this.AcceptingConnectionCount != target.AcceptingConnectionCount) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.CkadMediatorReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.CkadMediatorReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConnectingConnectionCount != 0)
                {
                    w.Write((uint)1);
                    w.Write(value.ConnectingConnectionCount);
                }
                if (value.AcceptingConnectionCount != 0)
                {
                    w.Write((uint)2);
                    w.Write(value.AcceptingConnectionCount);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.CkadMediatorReport Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                uint p_connectingConnectionCount = 0;
                uint p_acceptingConnectionCount = 0;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_connectingConnectionCount = r.GetUInt32();
                                break;
                            }
                        case 2:
                            {
                                p_acceptingConnectionCount = r.GetUInt32();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.CkadMediatorReport(p_connectingConnectionCount, p_acceptingConnectionCount);
            }
        }
    }
    public sealed partial class ContentExchangerOptions : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentExchangerOptions>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentExchangerOptions> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentExchangerOptions>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.ContentExchangerOptions Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentExchangerOptions>.Empty;

        static ContentExchangerOptions()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentExchangerOptions>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentExchangerOptions>.Empty = new global::Omnius.Xeus.Engines.Models.ContentExchangerOptions(string.Empty, 0);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxConfigDirectoryPathLength = 1024;

        public ContentExchangerOptions(string configDirectoryPath, uint maxConnectionCount)
        {
            if (configDirectoryPath is null) throw new global::System.ArgumentNullException("configDirectoryPath");
            if (configDirectoryPath.Length > 1024) throw new global::System.ArgumentOutOfRangeException("configDirectoryPath");
            this.ConfigDirectoryPath = configDirectoryPath;
            this.MaxConnectionCount = maxConnectionCount;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (configDirectoryPath != default) ___h.Add(configDirectoryPath.GetHashCode());
                if (maxConnectionCount != default) ___h.Add(maxConnectionCount.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string ConfigDirectoryPath { get; }
        public uint MaxConnectionCount { get; }

        public static global::Omnius.Xeus.Engines.Models.ContentExchangerOptions Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.ContentExchangerOptions? left, global::Omnius.Xeus.Engines.Models.ContentExchangerOptions? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.ContentExchangerOptions? left, global::Omnius.Xeus.Engines.Models.ContentExchangerOptions? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.ContentExchangerOptions) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.ContentExchangerOptions)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.ContentExchangerOptions? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConfigDirectoryPath != target.ConfigDirectoryPath) return false;
            if (this.MaxConnectionCount != target.MaxConnectionCount) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentExchangerOptions>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.ContentExchangerOptions value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConfigDirectoryPath != string.Empty)
                {
                    w.Write((uint)1);
                    w.Write(value.ConfigDirectoryPath);
                }
                if (value.MaxConnectionCount != 0)
                {
                    w.Write((uint)2);
                    w.Write(value.MaxConnectionCount);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.ContentExchangerOptions Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string p_configDirectoryPath = string.Empty;
                uint p_maxConnectionCount = 0;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_configDirectoryPath = r.GetString(1024);
                                break;
                            }
                        case 2:
                            {
                                p_maxConnectionCount = r.GetUInt32();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.ContentExchangerOptions(p_configDirectoryPath, p_maxConnectionCount);
            }
        }
    }
    public sealed partial class ContentExchangerReport : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentExchangerReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentExchangerReport> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentExchangerReport>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.ContentExchangerReport Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentExchangerReport>.Empty;

        static ContentExchangerReport()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentExchangerReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentExchangerReport>.Empty = new global::Omnius.Xeus.Engines.Models.ContentExchangerReport(0, 0);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public ContentExchangerReport(uint connectingConnectionCount, uint acceptingConnectionCount)
        {
            this.ConnectingConnectionCount = connectingConnectionCount;
            this.AcceptingConnectionCount = acceptingConnectionCount;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (connectingConnectionCount != default) ___h.Add(connectingConnectionCount.GetHashCode());
                if (acceptingConnectionCount != default) ___h.Add(acceptingConnectionCount.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public uint ConnectingConnectionCount { get; }
        public uint AcceptingConnectionCount { get; }

        public static global::Omnius.Xeus.Engines.Models.ContentExchangerReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.ContentExchangerReport? left, global::Omnius.Xeus.Engines.Models.ContentExchangerReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.ContentExchangerReport? left, global::Omnius.Xeus.Engines.Models.ContentExchangerReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.ContentExchangerReport) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.ContentExchangerReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.ContentExchangerReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConnectingConnectionCount != target.ConnectingConnectionCount) return false;
            if (this.AcceptingConnectionCount != target.AcceptingConnectionCount) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentExchangerReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.ContentExchangerReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConnectingConnectionCount != 0)
                {
                    w.Write((uint)1);
                    w.Write(value.ConnectingConnectionCount);
                }
                if (value.AcceptingConnectionCount != 0)
                {
                    w.Write((uint)2);
                    w.Write(value.AcceptingConnectionCount);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.ContentExchangerReport Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                uint p_connectingConnectionCount = 0;
                uint p_acceptingConnectionCount = 0;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_connectingConnectionCount = r.GetUInt32();
                                break;
                            }
                        case 2:
                            {
                                p_acceptingConnectionCount = r.GetUInt32();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.ContentExchangerReport(p_connectingConnectionCount, p_acceptingConnectionCount);
            }
        }
    }
    public sealed partial class ContentPublisherOptions : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherOptions>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentPublisherOptions> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherOptions>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.ContentPublisherOptions Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherOptions>.Empty;

        static ContentPublisherOptions()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherOptions>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherOptions>.Empty = new global::Omnius.Xeus.Engines.Models.ContentPublisherOptions(string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxConfigDirectoryPathLength = 1024;

        public ContentPublisherOptions(string configDirectoryPath)
        {
            if (configDirectoryPath is null) throw new global::System.ArgumentNullException("configDirectoryPath");
            if (configDirectoryPath.Length > 1024) throw new global::System.ArgumentOutOfRangeException("configDirectoryPath");

            this.ConfigDirectoryPath = configDirectoryPath;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (configDirectoryPath != default) ___h.Add(configDirectoryPath.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string ConfigDirectoryPath { get; }

        public static global::Omnius.Xeus.Engines.Models.ContentPublisherOptions Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.ContentPublisherOptions? left, global::Omnius.Xeus.Engines.Models.ContentPublisherOptions? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.ContentPublisherOptions? left, global::Omnius.Xeus.Engines.Models.ContentPublisherOptions? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.ContentPublisherOptions) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.ContentPublisherOptions)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.ContentPublisherOptions? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConfigDirectoryPath != target.ConfigDirectoryPath) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentPublisherOptions>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.ContentPublisherOptions value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConfigDirectoryPath != string.Empty)
                {
                    w.Write((uint)1);
                    w.Write(value.ConfigDirectoryPath);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.ContentPublisherOptions Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string p_configDirectoryPath = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_configDirectoryPath = r.GetString(1024);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.ContentPublisherOptions(p_configDirectoryPath);
            }
        }
    }
    public sealed partial class ContentPublisherItemReport : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport>.Empty;

        static ContentPublisherItemReport()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport>.Empty = new global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport(null, global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxFilePathLength = 2147483647;
        public static readonly int MaxRegistrantLength = 2147483647;

        public ContentPublisherItemReport(string? filePath, global::Omnius.Core.Cryptography.OmniHash rootHash, string registrant)
        {
            if (filePath is not null && filePath.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("filePath");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.FilePath = filePath;
            this.RootHash = rootHash;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (filePath != default) ___h.Add(filePath.GetHashCode());
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string? FilePath { get; }
        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport? left, global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport? left, global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.FilePath != target.FilePath) return false;
            if (this.RootHash != target.RootHash) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.FilePath != null)
                {
                    w.Write((uint)1);
                    w.Write(value.FilePath);
                }
                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)2);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)3);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string? p_filePath = null;
                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_filePath = r.GetString(2147483647);
                                break;
                            }
                        case 2:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 3:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport(p_filePath, p_rootHash, p_registrant);
            }
        }
    }
    public sealed partial class ContentPublisherReport : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentPublisherReport> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherReport>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.ContentPublisherReport Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherReport>.Empty;

        static ContentPublisherReport()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentPublisherReport>.Empty = new global::Omnius.Xeus.Engines.Models.ContentPublisherReport(global::System.Array.Empty<global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxContentPublisherItemsCount = 2147483647;

        public ContentPublisherReport(global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport[] contentPublisherItems)
        {
            if (contentPublisherItems is null) throw new global::System.ArgumentNullException("contentPublisherItems");
            if (contentPublisherItems.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("contentPublisherItems");
            foreach (var n in contentPublisherItems)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.ContentPublisherItems = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport>(contentPublisherItems);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in contentPublisherItems)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport> ContentPublisherItems { get; }

        public static global::Omnius.Xeus.Engines.Models.ContentPublisherReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.ContentPublisherReport? left, global::Omnius.Xeus.Engines.Models.ContentPublisherReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.ContentPublisherReport? left, global::Omnius.Xeus.Engines.Models.ContentPublisherReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.ContentPublisherReport) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.ContentPublisherReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.ContentPublisherReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.ContentPublisherItems, target.ContentPublisherItems)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentPublisherReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.ContentPublisherReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ContentPublisherItems.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.ContentPublisherItems.Count);
                    foreach (var n in value.ContentPublisherItems)
                    {
                        global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.ContentPublisherReport Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport[] p_contentPublisherItems = global::System.Array.Empty<global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_contentPublisherItems = new global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport[length];
                                for (int i = 0; i < p_contentPublisherItems.Length; i++)
                                {
                                    p_contentPublisherItems[i] = global::Omnius.Xeus.Engines.Models.ContentPublisherItemReport.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.ContentPublisherReport(p_contentPublisherItems);
            }
        }
    }
    public sealed partial class ContentSubscriberOptions : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions>.Empty;

        static ContentSubscriberOptions()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions>.Empty = new global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions(string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxConfigDirectoryPathLength = 1024;

        public ContentSubscriberOptions(string configDirectoryPath)
        {
            if (configDirectoryPath is null) throw new global::System.ArgumentNullException("configDirectoryPath");
            if (configDirectoryPath.Length > 1024) throw new global::System.ArgumentOutOfRangeException("configDirectoryPath");

            this.ConfigDirectoryPath = configDirectoryPath;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (configDirectoryPath != default) ___h.Add(configDirectoryPath.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string ConfigDirectoryPath { get; }

        public static global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions? left, global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions? left, global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConfigDirectoryPath != target.ConfigDirectoryPath) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConfigDirectoryPath != string.Empty)
                {
                    w.Write((uint)1);
                    w.Write(value.ConfigDirectoryPath);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string p_configDirectoryPath = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_configDirectoryPath = r.GetString(1024);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.ContentSubscriberOptions(p_configDirectoryPath);
            }
        }
    }
    public sealed partial class ContentSubscriberItemReport : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport>.Empty;

        static ContentSubscriberItemReport()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport>.Empty = new global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport(global::Omnius.Core.Cryptography.OmniHash.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public ContentSubscriberItemReport(global::Omnius.Core.Cryptography.OmniHash rootHash, string registrant)
        {
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.RootHash = rootHash;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport? left, global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport? left, global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.RootHash != target.RootHash) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport(p_rootHash, p_registrant);
            }
        }
    }
    public sealed partial class ContentSubscriberReport : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentSubscriberReport> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberReport>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.ContentSubscriberReport Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberReport>.Empty;

        static ContentSubscriberReport()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.ContentSubscriberReport>.Empty = new global::Omnius.Xeus.Engines.Models.ContentSubscriberReport(global::System.Array.Empty<global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxContentSubscriberItemsCount = 2147483647;

        public ContentSubscriberReport(global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport[] contentSubscriberItems)
        {
            if (contentSubscriberItems is null) throw new global::System.ArgumentNullException("contentSubscriberItems");
            if (contentSubscriberItems.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("contentSubscriberItems");
            foreach (var n in contentSubscriberItems)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.ContentSubscriberItems = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport>(contentSubscriberItems);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in contentSubscriberItems)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport> ContentSubscriberItems { get; }

        public static global::Omnius.Xeus.Engines.Models.ContentSubscriberReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.ContentSubscriberReport? left, global::Omnius.Xeus.Engines.Models.ContentSubscriberReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.ContentSubscriberReport? left, global::Omnius.Xeus.Engines.Models.ContentSubscriberReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.ContentSubscriberReport) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.ContentSubscriberReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.ContentSubscriberReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.ContentSubscriberItems, target.ContentSubscriberItems)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.ContentSubscriberReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.ContentSubscriberReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ContentSubscriberItems.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.ContentSubscriberItems.Count);
                    foreach (var n in value.ContentSubscriberItems)
                    {
                        global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.ContentSubscriberReport Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport[] p_contentSubscriberItems = global::System.Array.Empty<global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_contentSubscriberItems = new global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport[length];
                                for (int i = 0; i < p_contentSubscriberItems.Length; i++)
                                {
                                    p_contentSubscriberItems[i] = global::Omnius.Xeus.Engines.Models.ContentSubscriberItemReport.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.ContentSubscriberReport(p_contentSubscriberItems);
            }
        }
    }
    public sealed partial class DeclaredMessageExchangerOptions : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions>.Empty;

        static DeclaredMessageExchangerOptions()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions>.Empty = new global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions(string.Empty, 0);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxConfigDirectoryPathLength = 1024;

        public DeclaredMessageExchangerOptions(string configDirectoryPath, uint maxConnectionCount)
        {
            if (configDirectoryPath is null) throw new global::System.ArgumentNullException("configDirectoryPath");
            if (configDirectoryPath.Length > 1024) throw new global::System.ArgumentOutOfRangeException("configDirectoryPath");
            this.ConfigDirectoryPath = configDirectoryPath;
            this.MaxConnectionCount = maxConnectionCount;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (configDirectoryPath != default) ___h.Add(configDirectoryPath.GetHashCode());
                if (maxConnectionCount != default) ___h.Add(maxConnectionCount.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string ConfigDirectoryPath { get; }
        public uint MaxConnectionCount { get; }

        public static global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions? left, global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions? left, global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConfigDirectoryPath != target.ConfigDirectoryPath) return false;
            if (this.MaxConnectionCount != target.MaxConnectionCount) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConfigDirectoryPath != string.Empty)
                {
                    w.Write((uint)1);
                    w.Write(value.ConfigDirectoryPath);
                }
                if (value.MaxConnectionCount != 0)
                {
                    w.Write((uint)2);
                    w.Write(value.MaxConnectionCount);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string p_configDirectoryPath = string.Empty;
                uint p_maxConnectionCount = 0;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_configDirectoryPath = r.GetString(1024);
                                break;
                            }
                        case 2:
                            {
                                p_maxConnectionCount = r.GetUInt32();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerOptions(p_configDirectoryPath, p_maxConnectionCount);
            }
        }
    }
    public sealed partial class DeclaredMessageExchangerReport : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport>.Empty;

        static DeclaredMessageExchangerReport()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport>.Empty = new global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport(0, 0);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public DeclaredMessageExchangerReport(uint connectingConnectionCount, uint acceptingConnectionCount)
        {
            this.ConnectingConnectionCount = connectingConnectionCount;
            this.AcceptingConnectionCount = acceptingConnectionCount;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (connectingConnectionCount != default) ___h.Add(connectingConnectionCount.GetHashCode());
                if (acceptingConnectionCount != default) ___h.Add(acceptingConnectionCount.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public uint ConnectingConnectionCount { get; }
        public uint AcceptingConnectionCount { get; }

        public static global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport? left, global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport? left, global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConnectingConnectionCount != target.ConnectingConnectionCount) return false;
            if (this.AcceptingConnectionCount != target.AcceptingConnectionCount) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConnectingConnectionCount != 0)
                {
                    w.Write((uint)1);
                    w.Write(value.ConnectingConnectionCount);
                }
                if (value.AcceptingConnectionCount != 0)
                {
                    w.Write((uint)2);
                    w.Write(value.AcceptingConnectionCount);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                uint p_connectingConnectionCount = 0;
                uint p_acceptingConnectionCount = 0;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_connectingConnectionCount = r.GetUInt32();
                                break;
                            }
                        case 2:
                            {
                                p_acceptingConnectionCount = r.GetUInt32();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.DeclaredMessageExchangerReport(p_connectingConnectionCount, p_acceptingConnectionCount);
            }
        }
    }
    public sealed partial class DeclaredMessagePublisherOptions : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions>.Empty;

        static DeclaredMessagePublisherOptions()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions>.Empty = new global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions(string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxConfigDirectoryPathLength = 1024;

        public DeclaredMessagePublisherOptions(string configDirectoryPath)
        {
            if (configDirectoryPath is null) throw new global::System.ArgumentNullException("configDirectoryPath");
            if (configDirectoryPath.Length > 1024) throw new global::System.ArgumentOutOfRangeException("configDirectoryPath");

            this.ConfigDirectoryPath = configDirectoryPath;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (configDirectoryPath != default) ___h.Add(configDirectoryPath.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string ConfigDirectoryPath { get; }

        public static global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions? left, global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions? left, global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConfigDirectoryPath != target.ConfigDirectoryPath) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConfigDirectoryPath != string.Empty)
                {
                    w.Write((uint)1);
                    w.Write(value.ConfigDirectoryPath);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string p_configDirectoryPath = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_configDirectoryPath = r.GetString(1024);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherOptions(p_configDirectoryPath);
            }
        }
    }
    public sealed partial class DeclaredMessagePublisherItemReport : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport>.Empty;

        static DeclaredMessagePublisherItemReport()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport>.Empty = new global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport(global::Omnius.Core.Cryptography.OmniSignature.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public DeclaredMessagePublisherItemReport(global::Omnius.Core.Cryptography.OmniSignature signature, string registrant)
        {
            if (signature is null) throw new global::System.ArgumentNullException("signature");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.Signature = signature;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (signature != default) ___h.Add(signature.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport? left, global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport? left, global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Signature != target.Signature) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport(p_signature, p_registrant);
            }
        }
    }
    public sealed partial class DeclaredMessagePublisherReport : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport>.Empty;

        static DeclaredMessagePublisherReport()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport>.Empty = new global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport(global::System.Array.Empty<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxDeclaredMessagePublisherItemsCount = 2147483647;

        public DeclaredMessagePublisherReport(global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport[] declaredMessagePublisherItems)
        {
            if (declaredMessagePublisherItems is null) throw new global::System.ArgumentNullException("declaredMessagePublisherItems");
            if (declaredMessagePublisherItems.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("declaredMessagePublisherItems");
            foreach (var n in declaredMessagePublisherItems)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.DeclaredMessagePublisherItems = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport>(declaredMessagePublisherItems);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in declaredMessagePublisherItems)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport> DeclaredMessagePublisherItems { get; }

        public static global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport? left, global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport? left, global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.DeclaredMessagePublisherItems, target.DeclaredMessagePublisherItems)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.DeclaredMessagePublisherItems.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.DeclaredMessagePublisherItems.Count);
                    foreach (var n in value.DeclaredMessagePublisherItems)
                    {
                        global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport[] p_declaredMessagePublisherItems = global::System.Array.Empty<global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_declaredMessagePublisherItems = new global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport[length];
                                for (int i = 0; i < p_declaredMessagePublisherItems.Length; i++)
                                {
                                    p_declaredMessagePublisherItems[i] = global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherItemReport.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.DeclaredMessagePublisherReport(p_declaredMessagePublisherItems);
            }
        }
    }
    public sealed partial class DeclaredMessageSubscriberOptions : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions>.Empty;

        static DeclaredMessageSubscriberOptions()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions>.Empty = new global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions(string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxConfigDirectoryPathLength = 1024;

        public DeclaredMessageSubscriberOptions(string configDirectoryPath)
        {
            if (configDirectoryPath is null) throw new global::System.ArgumentNullException("configDirectoryPath");
            if (configDirectoryPath.Length > 1024) throw new global::System.ArgumentOutOfRangeException("configDirectoryPath");

            this.ConfigDirectoryPath = configDirectoryPath;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (configDirectoryPath != default) ___h.Add(configDirectoryPath.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public string ConfigDirectoryPath { get; }

        public static global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions? left, global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions? left, global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.ConfigDirectoryPath != target.ConfigDirectoryPath) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.ConfigDirectoryPath != string.Empty)
                {
                    w.Write((uint)1);
                    w.Write(value.ConfigDirectoryPath);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                string p_configDirectoryPath = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_configDirectoryPath = r.GetString(1024);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberOptions(p_configDirectoryPath);
            }
        }
    }
    public sealed partial class DeclaredMessageSubscriberItemReport : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport>.Empty;

        static DeclaredMessageSubscriberItemReport()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport>.Empty = new global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport(global::Omnius.Core.Cryptography.OmniSignature.Empty, string.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxRegistrantLength = 2147483647;

        public DeclaredMessageSubscriberItemReport(global::Omnius.Core.Cryptography.OmniSignature signature, string registrant)
        {
            if (signature is null) throw new global::System.ArgumentNullException("signature");
            if (registrant is null) throw new global::System.ArgumentNullException("registrant");
            if (registrant.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("registrant");

            this.Signature = signature;
            this.Registrant = registrant;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (signature != default) ___h.Add(signature.GetHashCode());
                if (registrant != default) ___h.Add(registrant.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
        public string Registrant { get; }

        public static global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport? left, global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport? left, global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Signature != target.Signature) return false;
            if (this.Registrant != target.Registrant) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
                }
                if (value.Registrant != string.Empty)
                {
                    w.Write((uint)2);
                    w.Write(value.Registrant);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
                string p_registrant = string.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_registrant = r.GetString(2147483647);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport(p_signature, p_registrant);
            }
        }
    }
    public sealed partial class DeclaredMessageSubscriberReport : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport>.Formatter;
        public static global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport>.Empty;

        static DeclaredMessageSubscriberReport()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport>.Empty = new global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport(global::System.Array.Empty<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxDeclaredMessageSubscriberItemsCount = 2147483647;

        public DeclaredMessageSubscriberReport(global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport[] declaredMessageSubscriberItems)
        {
            if (declaredMessageSubscriberItems is null) throw new global::System.ArgumentNullException("declaredMessageSubscriberItems");
            if (declaredMessageSubscriberItems.Length > 2147483647) throw new global::System.ArgumentOutOfRangeException("declaredMessageSubscriberItems");
            foreach (var n in declaredMessageSubscriberItems)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.DeclaredMessageSubscriberItems = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport>(declaredMessageSubscriberItems);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in declaredMessageSubscriberItems)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport> DeclaredMessageSubscriberItems { get; }

        public static global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport? left, global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport? left, global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.DeclaredMessageSubscriberItems, target.DeclaredMessageSubscriberItems)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.DeclaredMessageSubscriberItems.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.DeclaredMessageSubscriberItems.Count);
                    foreach (var n in value.DeclaredMessageSubscriberItems)
                    {
                        global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport[] p_declaredMessageSubscriberItems = global::System.Array.Empty<global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_declaredMessageSubscriberItems = new global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport[length];
                                for (int i = 0; i < p_declaredMessageSubscriberItems.Length; i++)
                                {
                                    p_declaredMessageSubscriberItems[i] = global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberItemReport.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Models.DeclaredMessageSubscriberReport(p_declaredMessageSubscriberItems);
            }
        }
    }
}
